<?xml version="1.0" encoding="UTF-8"?>
<!--
  This schema includes and redefines James Clark's
  RELAX NG for RELAX NG
-->
<grammar ns="http://relaxng.org/ns/structure/1.0" xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:dcterms="http://purl.org/dc/terms/" xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns="http://relaxng.org/ns/structure/1.0"
  datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <dcterms:title>RuleML Design Pattern for Relax NG Schemas: Expansion Modules</dcterms:title>
  <dcterms:creator>http://wiki.ruleml.org/index.php/User:Athant</dcterms:creator>
  <dc:subject>RuleML, design pattern</dc:subject>
  <dcterms:description>This meta-schema enforces the design pattern for expansion modules when applied to
    a Relax NG schema in XML-based syntax. The merger of a base grammar with an expansion module
    gives a language which syntactically contains the language generated by the base grammar
    (monotonicity). Any expansion module also satisfies the conditions of a base grammar; thus,
    expansion modules that are compatible (valid when merged) are monotonically freely
    combinable.</dcterms:description>
  <dcterms:language>en</dcterms:language>
  <dc:rights>Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.</dc:rights>
  <dcterms:rights>http://ruleml.org/licensing/RSL1.0-RuleML</dcterms:rights>
  <dcterms:relation>http://deliberation.ruleml.org</dcterms:relation>
  <dcterms:relation>http://relaxng.org/relaxng.rng</dcterms:relation>
  <include href="http://relaxng.org/relaxng.rng">
    <define name="pattern">
      <choice>
        <element name="element">
          <choice>
            <attribute name="name">
              <data type="QName"/>
            </attribute>
            <ref name="open-name-class"/>
          </choice>
          <ref name="common-atts"/>
          <ref name="open-patterns"/>
        </element>
        <element name="attribute">
          <ref name="common-atts"/>
          <choice>
            <attribute name="name">
              <data type="QName"/>
            </attribute>
            <ref name="open-name-class"/>
          </choice>
          <interleave>
            <ref name="other"/>
            <optional>
              <ref name="pattern"/>
            </optional>
          </interleave>
        </element>
        <element name="group">
          <ref name="common-atts"/>
          <ref name="open-patterns"/>
        </element>
        <element name="interleave">
          <ref name="common-atts"/>
          <ref name="open-patterns"/>
        </element>
        <element name="choice">
          <ref name="common-atts"/>
          <ref name="open-patterns"/>
        </element>
        <ref name="optional-element"/>
        <ref name="zeroOrMore-element"/>
        <element name="oneOrMore">
          <ref name="common-atts"/>
          <ref name="open-patterns"/>
        </element>
        <element name="list">
          <ref name="common-atts"/>
          <ref name="open-patterns"/>
        </element>
        <element name="mixed">
          <ref name="common-atts"/>
          <ref name="open-patterns"/>
        </element>
        <element name="ref">
          <attribute name="name">
            <data type="NCName"/>
          </attribute>
          <ref name="common-atts"/>
          <ref name="other"/>
        </element>
        <element name="parentRef">
          <attribute name="name">
            <data type="NCName"/>
          </attribute>
          <ref name="common-atts"/>
          <ref name="other"/>
        </element>
        <ref name="empty-element"/>
        <element name="text">
          <ref name="common-atts"/>
          <ref name="other"/>
        </element>
        <element name="value">
          <optional>
            <attribute name="type">
              <data type="NCName"/>
            </attribute>
          </optional>
          <ref name="common-atts"/>
          <text/>
        </element>
        <element name="data">
          <attribute name="type">
            <data type="NCName"/>
          </attribute>
          <ref name="common-atts"/>
          <interleave>
            <ref name="other"/>
            <group>
              <zeroOrMore>
                <element name="param">
                  <attribute name="name">
                    <data type="NCName"/>
                  </attribute>
                  <ref name="common-atts"/>
                  <text/>
                </element>
              </zeroOrMore>
              <optional>
                <element name="except">
                  <ref name="common-atts"/>
                  <ref name="open-patterns"/>
                </element>
              </optional>
            </group>
          </interleave>
        </element>
        <element name="notAllowed">
          <ref name="common-atts"/>
          <ref name="other"/>
        </element>
        <element name="externalRef">
          <attribute name="href">
            <data type="anyURI"/>
          </attribute>
          <ref name="common-atts"/>
          <ref name="other"/>
        </element>
        <element name="grammar">
          <ref name="common-atts"/>
          <ref name="grammar-content"/>
        </element>
      </choice>
    </define>
    <define name="define-element">
      <choice>
        <ref name="define-element.choice"/>
        <ref name="define-element.interleave"/>
        <ref name="define-element.noCombine"/>
      </choice>
    </define>
  </include>
  <define name="define-element.choice">
    <element name="define">
      <ref name="nameNCName.choice"/>
      <ref name="combine-att.choice"/>
      <ref name="common-atts"/>
      <ref name="open-patterns"/>
    </element>
  </define>
  <define name="define-element.interleave">
    <element name="define">
      <ref name="nameNCName.interleave"/>
      <ref name="combine-att.interleave"/>
      <ref name="common-atts"/>
      <ref name="open-optional"/>
    </element>
  </define>
  <define name="define-element.noCombine">
    <element name="define">
      <ref name="nameNCName.noCombine"/>
      <ref name="common-atts"/>
      <ref name="open-patterns"/>
    </element>
  </define>
  <define name="nameNCName.choice">
    <attribute name="name">
      <data type="NCName">
        <param name="pattern">.*\.(choice|main|content|value|datatype|sequence|defs)</param>
      </data>
    </attribute>
  </define>
  <define name="nameNCName.interleave">
    <attribute name="name">
      <data type="NCName">
        <param name="pattern">.*\.(attlist|header)</param>
      </data>
    </attribute>
  </define>
  <define name="nameNCName.noCombine">
    <attribute name="name">
      <data type="NCName">
        <except>
          <data type="NCName">
            <param name="pattern"
              >.*\.(choice|main|content|value|datatype|sequence|defs|attlist|header)</param>
          </data>
        </except>
      </data>
    </attribute>
  </define>
  <!--    xsd:NCName { pattern = ".*\.(def|notallowed)"}}  -->
  <define name="combine-att.choice">
    <attribute name="combine">
      <value>choice</value>
    </attribute>
  </define>
  <define name="combine-att.interleave">
    <attribute name="combine">
      <value>interleave</value>
    </attribute>
  </define>
  <define name="empty-element">
    <element name="empty">
      <ref name="common-atts"/>
      <ref name="other"/>
    </element>
  </define>
  <define name="open-optional">
    <interleave>
      <ref name="other"/>
      <choice>
        <ref name="zeroOrMore-element"/>
        <ref name="optional-element"/>
        <ref name="empty-element"/>
      </choice>
    </interleave>
  </define>
  <define name="optional-element">
    <element name="optional">
      <ref name="common-atts"/>
      <ref name="open-patterns"/>
    </element>
  </define>
  <define name="zeroOrMore-element">
    <element name="zeroOrMore">
      <ref name="common-atts"/>
      <ref name="open-patterns"/>
    </element>
  </define>
</grammar>
