<?xml version="1.0" encoding="UTF-8"?>


<RuleML xmlns="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://ruleml.org/spec http://reaction.ruleml.org/1.0/xsd/dr.xsd">
  <!-- The examples shows how derivation rules and queries are explicitly quantified.

Note, these examples makes use of generic Quantifier a which is specialized by pointing
to an externally defined quantifier definition. This approach is extensible and allows 
user-defined quantifiers as needed for certain logics. 

It also defines the shorter quantifier element 
<Forall> for ruleml:Forall
<Exists> for ruleml:Exists

-->

  <!-- assert knowledge -->

  <Assert>

    <!-- rule using generic Quantifier -->

    <Rule>

      <quantification>
        <!-- explicit quantification -->

        <!-- forall X such that X is not John if X likes wine then John likes X  
          "forall" quantifier; 
		     Note: Reaction RuleML 1.0 also supports the "shortcut" 
                 element "Forall" see example rule below -->

        <Quantifier type="ruleml:Forall">

          <!-- for all ?x -->
          <Var>x</Var>

          <!-- guarded quantifier: such that ?x is not John -->
          <Neg>
            <Equal>
              <Var>x</Var>
              <Ind>John</Ind>
            </Equal>
          </Neg>

        </Quantifier>
      </quantification>


      <if>
        <Atom>
          <op>
            <Rel>likes</Rel>
          </op>
          <Var>X</Var>
          <Ind>wine</Ind>
        </Atom>
      </if>
      <then>
        <Atom>
          <op>
            <Rel>likes</Rel>
          </op>
          <Ind>John</Ind>
          <Var>X</Var>
        </Atom>
      </then>
    </Rule>
    
    <!-- forall X such that X is a Person and not John if X likes wine then John likes X the same rule using predefine 
         uses predefined Forall quantifier -->
    <Rule>
      
      <quantification>
         
        <!-- "forall" quantifier -->
        
        <Forall>
          
          <!-- for all ?x -->
          <declare><Var>x</Var></declare>
          
          <!-- "such that" guard: ?x is a person and ?x is not John -->
          <formula>
            <Neg>
              <Equal>
                <Var type="Person">x</Var>
                <Ind>John</Ind>
              </Equal>
            </Neg>
          </formula>
       
        </Forall>
      </quantification>
      
      <if>
        <Atom>
          <op>
            <Rel>likes</Rel>
          </op>
          <Var>X</Var>
          <Ind>wine</Ind>
        </Atom>
      </if>
      <then>
        <Atom>
            <Rel>likes</Rel>
            <Ind>John</Ind>
            <Var>X</Var>
        </Atom>
      </then>
    </Rule>

    <!-- fact -->

    <Atom>
      
      <op>
        <Rel>likes</Rel>
      </op>
      <Ind>Mary</Ind>
      <Ind>wine</Ind>
    </Atom>

  </Assert>

  <!-- query knowledge base -->

  <Query>

    <quantification>
      <!-- explicit quantification -->

      <!-- "Exists" quantifier; 
		     Note: Reaction RuleML 1.0 also supports the "shortcut" 
                 element "Exists", see example below -->

      <Quantifier type="ruleml:Exists">
        <Var>x</Var>
      </Quantifier>

    </quantification>


    <Atom>
      <Rel>likes</Rel>
      <Ind>John</Ind>
      <Var>whom</Var>
    </Atom>
  </Query>

  <!-- the same query using predefine Exist quantifier -->

  <Query>
    <quantification>    
      <!-- "Exists" quantifier -->
      <Exists>
        <declare>
          <Var>x</Var>
        </declare>  
      </Exists>
    </quantification>
    <Atom>
      <Rel>likes</Rel>
      <Ind>John</Ind>
      <Var>whom</Var>
    </Atom>
  </Query>

  <!-- further examples showing the expressiveness -->
  
 <Assert>

  <!-- if (forall X exists Y p(X,Y)) and q(X,Y) then exists Y r(Y) -->
  <Rule>
    <if>
      <And>
        <Atom>
          <!-- the quantification scope is on the Atom formula -->
          <quantification index="1"> 
            <Forall><Var>X</Var></Forall>
          </quantification>
          <quantification index="2">
            <Exists><Var>Y</Var></Exists>
          </quantification>
          <Rel>p</Rel>
          <Var>X</Var>
          <Var>Y</Var>
        </Atom>        
        <Atom> <!-- X and Y a free variables here -->
          <Rel>q</Rel>
          <Var>X</Var>
          <Var>Y</Var>
        </Atom>
      </And>
    </if>
    <then>
      <Atom>
        <quantification>
          <Exists>
            <Var>Y</Var>
          </Exists>
        </quantification>
        <Rel>r</Rel>
        <Var>Y</Var>
      </Atom>
    </then>
  </Rule>
   
  <!-- forall X if p(X) then q(X) --> 
  <Rule>
    <quantification>
      <Forall><Var>X</Var></Forall>
    </quantification>
    <if>
      <Atom>
        <Rel>p</Rel>
        <Var>X</Var>
      </Atom>
    </if>
    <then>
      <Atom>
        <Rel>q</Rel>
        <Var>X</Var>
      </Atom>
    </then>
  </Rule>
   
   <!-- by the closure attribute the default assumption for all variables in the scope of the if-then rule is universal quantification -->
   <Rule closure="universal">     
     <if>
       <Atom>
         <Rel>p</Rel>
         <Var>X</Var>
       </Atom>
     </if>
     <then>
       <Atom>
         <Rel>q</Rel>
         <Var>X</Var>
       </Atom>
     </then>
   </Rule>
   
   <!-- if (there is one and only one X for p(X)) then q(X)  -->  
   <Rule closure="uniqueX">
     <if>
       <Atom>
         <quantification>
           <Quantifier type="ruleml:Unique">
             <oid><Ind>uniqueX</Ind></oid>
             <declare><Var>X</Var></declare>
           </Quantifier>
         </quantification>
         <Rel>p</Rel>
         <Var>X</Var>
       </Atom>
     </if>
     <then>
       <Atom>
         <Rel>q</Rel>
         <Var>X</Var>
       </Atom>
     </then>
   </Rule>
      
   <!-- distributed rule example with rule interface referenced by rule implementation -->
   <Rule key="rule1">
     <signature>
       <Atom>
         <Rel>q</Rel>
         <Var mode="?"/>
       </Atom>  
     </signature>
   </Rule>
   
   <Rule keyref="rule1">
     <quantification>
       <Forall><Var>X</Var></Forall>
     </quantification>
     <if>
       <Atom>
         <Rel>p</Rel>
         <Var>X</Var>
       </Atom>
     </if>
     <then>
       <Atom>
         <Rel>q</Rel>
         <Var>X</Var>
       </Atom>
     </then>
   </Rule>
     
   
 </Assert>
  
</RuleML>
