<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://reaction.ruleml.org/1.02/xsd/dr.xsd"?>
<?xml-model href="http://reaction.ruleml.org/1.02/relaxng/dr.rnc" type="application/relax-ng-compact-syntax"?>
<RuleML xmlns="http://ruleml.org/spec"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://ruleml.org/spec http://reaction.ruleml.org/1.02/xsd/dr.xsd">

  <!-- a syntactic example rulebase for testing the Hornlog RuleML sublanguage -->

  <Assert mapClosure="universal">

    <Implies>
      <then>
        <Atom>
          <op>
            <Rel>asf</Rel>
          </op>
          <slot>
            <Ind>t</Ind>
            <Ind>b</Ind>
          </slot>
          <resl>
            <Var>c</Var>
          </resl>
        </Atom>
      </then>
      <if>
        <And>
          <Atom>
            <op>
              <Rel>friend</Rel>
            </op>
            <Ind>Jane</Ind>
            <Ind>Joan</Ind>
            <Ind>Jack</Ind>
            <Var>y</Var>
            <Ind>Frank</Ind>
            <slot>
              <Ind>yar</Ind>
              <Expr>
                <op>
                  <Fun>constructor</Fun>
                </op>
                <Plex>
                  <slot>
                    <Ind>yar2</Ind>
                    <Ind>c</Ind>
                  </slot>
                  <resl>
                    <Var>c</Var>
                  </resl>
                </Plex>
              </Expr>
            </slot>
          </Atom>
        </And>
      </if>
    </Implies>


    <Atom>
      <op>
        <Rel>some relation</Rel>
      </op>
      <slot>
        <Ind>role_name1</Ind>
        <Ind>role 1</Ind>
      </slot>
      <Ind>constant a</Ind>
      <Ind>constant b</Ind>
      <slot>
        <Ind>role_name2</Ind>
        <Ind>role 2</Ind>
      </slot>
    </Atom>

    <Atom>
      <op>
        <Rel>another relation</Rel>
      </op>
      <Ind>constant c</Ind>
      <Ind>constant d</Ind>
      <Expr>
        <op>
          <Fun>yac</Fun>
        </op>
        <repo>
          <Var>b</Var>
        </repo>
        <resl>
          <Plex>
            <slot>
              <Ind/>
              <Ind>test</Ind>
            </slot>
          </Plex>
        </resl>
      </Expr>
    </Atom>


    <Atom>
      <op>
        <Rel>some relation</Rel>
      </op>
      <slot>
        <Ind>role_name1</Ind>
        <Ind>role 1</Ind>
      </slot>
      <Ind>constant a</Ind>
      <Expr>
        <op>
          <Fun>empty</Fun>
        </op>
      </Expr>
      <Ind>constant b</Ind>
      <Skolem>constant b</Skolem>
      <repo>
        <Var>b</Var>
      </repo>
      <slot>
        <Ind>role_name2</Ind>
        <Ind>role 2</Ind>
      </slot>
    </Atom>
    <Atom>
      <op>
        <Rel>another relation</Rel>
      </op>
      <Ind>constant c</Ind>
      <Ind>constant d</Ind>
      <repo>
        <Var>x</Var>
      </repo>
      <slot>
        <Ind>role_name3</Ind>
        <Ind>role 3</Ind>
      </slot>
      <resl>
        <Plex>
          <slot>
            <Ind/>
            <Ind>test</Ind>
          </slot>
        </Plex>
      </resl>
    </Atom>


    <Atom>
      <op>
        <Rel>yet another relation</Rel>
      </op>
      <Skolem>constant b</Skolem>
      <Ind>constant e</Ind>
      <Ind>constant b</Ind>
      <slot>
        <Ind>role_name3</Ind>
        <Ind>role 3</Ind>
      </slot>
      <resl>
        <Var>b</Var>
      </resl>
    </Atom>

  </Assert>

</RuleML>
