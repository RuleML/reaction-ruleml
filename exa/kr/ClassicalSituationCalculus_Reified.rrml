<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://reaction.ruleml.org/1.02/relaxng/kr.rnc" type="application/relax-ng-compact-syntax"?>
<RuleML xmlns="http://ruleml.org/spec"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xsi:schemaLocation="http://ruleml.org/spec http://reaction.ruleml.org/1.02/xsd/kr.xsd">

  <!-- Example: Block World example represented in reified situation calculus 
  
    Classical Situation Calculus with reified fluents and actions (CSr)
  
  -->

  <!-- Includes the external semantic profile for situation calculus which has been axiomatized in Reaction RuleML.
       The included (XInclude) axiomatized profiles are asserted and can be referenced directly using keyref.
       In contrast to the external reference by the @type attribute, the @keyref makes a local reference to the included axioms of the referenced profile. 
  -->

  <!-- include the axioms from profile "SituationCalculusProfile.rrml" -->
  <xi:include href="http://reaction.ruleml.org/1.02/profiles/ReifiedClassicalSituationCalculusProfile.rrml" xpointer="xpointer(/RuleML/*)"/>

  <!-- use the included "ruleml:ReifiedClassicalSituationCalculus" semantic profile for interpretation -->
  <evaluation>
    <Profile keyref="ruleml:ReifiedClassicalSituationCalculus" direction="backward"/>
  </evaluation>

  <!-- assert knowledge -->

  <Assert>
  
  <!-- Action Precondition Axioms -->
  
  <Rulebase>    

    <!--   poss(move(X,Y),S) <-> holds(clear(X),S), holds(clear(Y),S), not(X = Y).  -->
    <Equivalent>
      <torso>
        <And>
          <Holds>
            <fluent>
              <Fluent>
                <Expr per="copy">
                  <Fun>clear</Fun>
                  <Var>X</Var>    
                </Expr> 
              </Fluent>
            </fluent>
            <at>
              <Situation>
                 <Var>S</Var>
              </Situation>   
            </at>
          </Holds>
          <Holds>
            <fluent>
              <Fluent>
                <Expr per="copy">
                  <Fun>clear</Fun>
                  <Var>Y</Var>
                </Expr>  
              </Fluent>
            </fluent>
            <at>
              <Situation>
                <Var>S</Var>
              </Situation>
            </at>
          </Holds>
          <Negation>
            <Equal>
              <Var>X</Var>
              <Var>Y</Var>
            </Equal>
          </Negation>
        </And>
      </torso>
      <torso>
        <Atom>
          <Rel>poss</Rel>
          <Action>
              <Expr per="copy"> 
                <Fun>move</Fun>
                <Var>X</Var>
                <Var>Y</Var>
              </Expr>
          </Action>
          <Situation>
              <Var>S</Var>
          </Situation>
        </Atom>
      </torso>
    </Equivalent>

    <!--     poss(putOnTable(X),S) <-> holds(clear(X),S), not(holds(ontable(X),S)).-->  
    <Equivalent>
      <torso>
        <And>
          <Holds>
            <fluent>
              <Fluent>
                <Expr per="copy">
                  <Fun>clear</Fun>
                  <Var>X</Var>
                </Expr>  
              </Fluent>  
            </fluent>
            <at>
              <Situation>
                 <Var>S</Var>
              </Situation>
            </at>
          </Holds>
          <Negation>
            <Holds>
              <fluent>
                <Fluent>
                  <Expr per="copy">
                    <Fun>ontable</Fun>
                    <Var>X</Var>
                  </Expr>  
                </Fluent>
              </fluent>
              <at>
                <Situation>
                   <Var>S</Var>
                </Situation>
              </at>
            </Holds>  
          </Negation>
        </And>
      </torso>
      <torso>
        <Atom>
          <Rel>poss</Rel>
          <Action>
            <Expr per="copy"> 
              <Fun>putOnTable</Fun>
              <Var>X</Var>
            </Expr>
          </Action>
          <Situation>
              <Var>S</Var>
          </Situation>            
        </Atom>
      </torso>
    </Equivalent>

  </Rulebase>  
    
  <!-- Successor State Axioms -->
  <Rulebase>

  
  <!-- holds(clear(X),do(A,S)) <-> (A = move(Y,Z) ;
                              A = putOnTable(Y)),
                              holds(on(Y,X),S) ;
                              holds(clear(X),S), not(A = move(Y,X)). -->
  <Equivalent>
    <torso>
      <Or>
        <And>
          <Or>
            <Equal>
              <Action><Var>A</Var></Action>
              <Action> 
                <Expr per="copy">
                  <Fun>move</Fun> 
                  <Var>X</Var> 
                  <Var>Z</Var> 
                </Expr>
              </Action>            
            </Equal>
            <Equal>
              <Action><Var>A</Var></Action>
              <Action> 
                <Expr per="copy">
                  <Fun>putOnTable</Fun> 
                  <Var>Y</Var> 
                </Expr>
              </Action>            
            </Equal>
          </Or>
          <Holds>
            <fluent>
              <Fluent>
                <Expr per="copy">
                  <Fun>on</Fun>
                  <Var>Y</Var>
                  <Var>X</Var>
                </Expr>
              </Fluent>
            </fluent>
            <at><Situation><Var>S</Var></Situation></at>
          </Holds>  
        </And>
        <And>
          <Holds>
            <fluent>
              <Fluent>
                <Expr per="copy">
                  <Fun>clear</Fun>
                  <Var>X</Var>
                </Expr>  
              </Fluent>    
            </fluent>
            <at>
              <Situation>
                <Var>S</Var>
              </Situation>
            </at>
          </Holds>  
          <Negation>
            <Equal>
              <Action><Var>A</Var></Action>
              <Action> 
                <Expr per="copy">
                  <Fun>move</Fun> 
                  <Var>Y</Var> 
                  <Var>X</Var> 
                </Expr>
              </Action>            
            </Equal>
          </Negation>
        </And>
      </Or>        
    </torso>
    <torso>
      <Holds>
        <fluent>
          <Fluent>
            <Expr per="copy">
                  <Fun>clear</Fun> 
                  <Var>X</Var>
             </Expr>
          </Fluent>
        </fluent>
        <at>
          <Situation>
              <Do>
                <do><Action><Var>A</Var></Action></do>
                <at><Situation><Var>S</Var></Situation></at>
              </Do>
          </Situation>
        </at>
      </Holds>
    </torso>
  </Equivalent>  
    
    <!-- holds(on(X,Y),do(A,S)) :- A = move(X,Y) ;
                            holds(on(X,Y),S), not A = putOnTable(X),
                            not A = move(X,Z). -->

   <Rule>
     <if>
       <Or>
         <Equal>
           <Action><Var>A</Var></Action>
           <Action> 
             <Expr per="copy">
               <Fun>move</Fun> 
               <Var>X</Var> 
               <Var>Y</Var> 
             </Expr>
           </Action>            
         </Equal>
         <And>
           <Holds>
             <fluent>
              <Fluent>
                <Expr per="copy">
                  <Fun>on</Fun>
                  <Var>Y</Var>
                  <Var>X</Var>
                </Expr>
              </Fluent>
             </fluent>
             <at><Situation><Var>S</Var></Situation></at>
           </Holds>  
           <Negation>
             <Equal>
               <Action><Var>A</Var></Action>
               <Action> 
                 <Expr per="copy">
                   <Fun>putOnTable</Fun> 
                   <Var>X</Var> 
                 </Expr>
               </Action>            
             </Equal>
           </Negation>
           <Negation>
             <Equal>
               <Action><Var>A</Var></Action>
               <Action> 
                 <Expr per="copy">
                   <Fun>move</Fun> 
                   <Var>Y</Var> 
                   <Var>X</Var> 
                 </Expr>
               </Action>            
             </Equal>
           </Negation>
         </And>
       </Or>
     </if>
     <then>
       <Holds>
         <fluent>
          <Fluent>
            <Expr per="copy">
              <Fun>on</Fun> 
              <Var>X</Var>
              <Var>Y</Var>
            </Expr>
          </Fluent>
         </fluent>
         <at>
          <Situation>
            <Do>
              <do><Action><Var>A</Var></Action></do>
              <at><Situation><Var>S</Var></Situation></at>
            </Do>
          </Situation>
         </at>
       </Holds>  
     </then>
   </Rule> 
    
    <!-- holds(ontable(X),do(A,S)) :- A = putOnTable(X) ;
                               holds(onTable(X),S), not A = move(X,Y). -->
    <Rule>
      <if>
        <Or>
          <Equal>
            <Action><Var>A</Var></Action>
            <Action> 
              <Expr per="copy">
                <Fun>putOnTable</Fun> 
                <Var>X</Var> 
              </Expr>
            </Action>            
          </Equal>
          <And>
            <Holds>
              <fluent>
                <Fluent>
                  <Expr per="copy">
                    <Fun>ontanle</Fun>
                    <Var>X</Var>
                  </Expr>
                </Fluent>
              </fluent>
              <at><Situation><Var>S</Var></Situation></at>
            </Holds>  
            <Negation>
              <Equal>
                <Action><Var>A</Var></Action>
                <Action> 
                  <Expr per="copy">
                    <Fun>move</Fun> 
                    <Var>X</Var> 
                    <Var>Y</Var> 
                  </Expr>
                </Action>            
              </Equal>
            </Negation>
          </And>
        </Or>
      </if>
      <then>
        <Holds>
          <fluent>
            <Fluent>
              <Expr per="copy">
                <Fun>ontable</Fun> 
                <Var>X</Var>
              </Expr>
            </Fluent>
          </fluent>
          <at>
            <Situation>
              <Do>
                <do><Action><Var>A</Var></Action></do>
                <at><Situation><Var>S</Var></Situation></at>
              </Do>
            </Situation>
          </at>
        </Holds>  
      </then>
    </Rule>
  </Rulebase>
    
    <!-- initial situation -->
    <Rulebase>
      
      <!-- block(a) -->
      <Atom>
        <Rel>block</Rel>
        <Ind>a</Ind>
      </Atom>
      
      <!-- block(b) -->
      <Atom>
        <Rel>block</Rel>
        <Ind>b</Ind>
      </Atom>
      
      <!-- block(c) -->
      <Atom>
        <Rel>block</Rel>
        <Ind>c</Ind>
      </Atom>
      
      <!-- block(d) -->
      <Atom>
        <Rel>block</Rel>
        <Ind>d</Ind>
      </Atom>
      
      <!-- block(e) -->
      <Atom>
        <Rel>block</Rel>
        <Ind>e</Ind>
      </Atom>
      
      <!-- block(f) -->
      <Atom>
        <Rel>block</Rel>
        <Ind>f</Ind>
      </Atom>
      
      <!-- holds(on(c,b), s0) -->
      
      <Holds>
        <fluent>
          <Fluent>
            <Expr per="copy">
              <Fun>on</Fun>
              <Ind>c</Ind>
              <Ind>b</Ind>
            </Expr>
          </Fluent>
        </fluent>
        <at><Situation><Ind>s0</Ind></Situation></at>
      </Holds>
       
      <!-- holds(on(b,a), s0) -->
      
      <Holds>
        <fluent>
          <Fluent>
            <Expr per="copy">
              <Fun>on</Fun>
              <Ind>b</Ind>
              <Ind>a</Ind>
            </Expr>
          </Fluent>
        </fluent>
        <at><Situation><Ind>s0</Ind></Situation></at>
      </Holds>
      
      
      <!-- holds(on(a,table), s0) -->
      
      <Holds>
        <fluent>
          <Fluent>
            <Expr per="copy">
              <Fun>on</Fun>
              <Ind>a</Ind>
              <Ind>table</Ind>
            </Expr>
          </Fluent>
        </fluent>
        <at><Situation><Ind>s0</Ind></Situation></at>
      </Holds>
      
      
      <!-- holds(on(e,d), s0) -->
      
      <Holds>
        <fluent>
          <Fluent>
            <Expr per="copy">
              <Fun>on</Fun>
              <Ind>c</Ind>
              <Ind>b</Ind>
            </Expr>
          </Fluent>
        </fluent>
        <at><Situation><Ind>s0</Ind></Situation></at>
      </Holds>
      
      
      <!-- holds(on(d,table), s0) -->
      
      <Holds>
        <fluent>
          <Fluent>
            <Expr per="copy">
              <Fun>on</Fun>
              <Ind>c</Ind>
              <Ind>b</Ind>
            </Expr>
          </Fluent>
        </fluent>
        <at><Situation><Ind>s0</Ind></Situation></at>
      </Holds>
      
      <!-- holds(on(f,table), s0) -->
      
      <Holds>
        <fluent>
          <Fluent>
            <Expr per="copy">
              <Fun>on</Fun>
              <Ind>c</Ind>
              <Ind>b</Ind>
            </Expr>
          </Fluent>
        </fluent>
        <at><Situation><Ind>s0</Ind></Situation></at>
      </Holds>
      
      
      <!-- there are no other blocks -->
      <Equivalent>
        <torso>
          <Atom>
            <Rel>block</Rel>
            <Var>X</Var>
          </Atom>        
        </torso>
        <torso>
          <Or>
            <Equal>
              <Var>X</Var>
              <Ind>a</Ind>
            </Equal>
            <Equal>
              <Var>X</Var>
              <Ind>b</Ind>
            </Equal>
            <Equal>
              <Var>X</Var>
              <Ind>c</Ind>
            </Equal>
            <Equal>
              <Var>X</Var>
              <Ind>d</Ind>
            </Equal>
            <Equal>
              <Var>X</Var>
              <Ind>e</Ind>
            </Equal>
            <Equal>
              <Var>X</Var>
              <Ind>f</Ind>
            </Equal>
          </Or>
        </torso> 
      </Equivalent>
      
    </Rulebase>
    
 </Assert>
</RuleML>