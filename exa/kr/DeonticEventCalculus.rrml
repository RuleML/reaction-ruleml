<?xml version="1.0" encoding="UTF-8"?>

<?xml-model href="http://reaction.ruleml.org/1.02/relaxng/kr.rnc" type="application/relax-ng-compact-syntax"?>
<RuleML xmlns="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://ruleml.org/spec http://reaction.ruleml.org/1.02/xsd/kr.xsd">
  
  <!-- This example shows how deontic operators are defined as fluents in the Event Calclulus. -->

  <!-- assert knowledge -->

  <Assert>

    <!-- reified deontic EC rule: "if happens(p(X),T) and holds(obliged(not(p(X))),T) then initiates(p(X),obliged(not(q(X))),T)"   -->
    
    <Rule>
      <if>
        <And>
          
          <Happens>
            <on><Action><Expr><Fun>p</Fun><Var>X</Var></Expr></Action></on>
            <at><Time><Var>T</Var></Time></at>
          </Happens>
          
          <Holds>
            <fluent>
              <Situation>
                <Expr per="modal">
                  <Fun per="modal" iri="ruleml:Obliged"/>
                  <Expr per="modal">
                      <Fun iri="ruleml:Neg"/>
                      <Expr><Fun>p</Fun><Var>X</Var></Expr>
                  </Expr>  
                </Expr>            
              </Situation>
            </fluent>
            <at><Time><Var mode="+">T</Var></Time></at>
          </Holds>  
          
        </And>  
      </if>
      <then>
        <Initiates>
          <on><Action><Expr><Fun per="value">p</Fun><Var>X</Var></Expr></Action></on>
          <fluent>
            <Situation>
              <Expr per="modal">
                <Fun per="modal" iri="ruleml:Obliged"/>
                <Expr per="modal">
                  <Fun iri="ruleml:Neg"/>
                  <Expr><Fun>p</Fun><Var>X</Var></Expr>
                </Expr>  
              </Expr>            
            </Situation>
          </fluent>
          <at><Time><Var mode="+">T</Var></Time></at>
        </Initiates> 
      </then>
    </Rule>

    <!-- reified deontic EC rule using Reify: "if happens(p(X),T) and holds(obliged(not(p(X))),T) then initiates(p(X),obliged(not(q(X))),T)"   -->
    
    <Rule>
      <if>
        <And>
          
          <Happens>
            <on><Action><Reify><Atom><Rel>p</Rel><Var>X</Var></Atom></Reify></Action></on>
            <at><Time><Var>T</Var></Time></at>
          </Happens>
          
          <Holds>
            <fluent>
              <Situation>
                <Reify>
                  <Operation type="ruleml:DeonticOperator" iri="ruleml:Obliged">
                    <Neg>
                      <Atom><Rel>p</Rel><Var>X</Var></Atom>
                    </Neg>
                  </Operation>
                </Reify>              
              </Situation>
            </fluent>
            <at><Time><Var mode="+">T</Var></Time></at>
          </Holds>  
          
        </And>  
      </if>
      <then>
        <Initiates>
          <on><Action><Reify><Atom><Rel per="value">p</Rel><Var>X</Var></Atom></Reify></Action></on>
          <fluent>
            <Situation>
              <Reify>
                <Operation type="ruleml:DeonticOperator" iri="ruleml:Obliged">
                  <Neg>
                    <Atom><Rel>q</Rel><Var>X</Var></Atom>
                  </Neg>
                </Operation>
              </Reify>              
            </Situation>          
          </fluent>
          <at><Time><Var mode="+">T</Var></Time></at>
        </Initiates> 
      </then>
    </Rule>

  </Assert>

  <!-- query knowledge base -->


  <!-- Query with using reified modal expressions -->
  <Query>
    <Holds>
      <fluent>
        <Situation>
          <Expr per="modal">
            <Fun per="modal" iri="ruleml:Obliged"/>
            <Expr per="modal">
              <Fun iri="ruleml:Neg"/>
              <Expr><Fun>p</Fun><Var>X</Var></Expr>
            </Expr>  
          </Expr>            
        </Situation>
      </fluent>
      <at><Time><Ind>t1</Ind></Time></at>
    </Holds>
  </Query>

  <!-- Query using Reify -->
  <Query>
    <Holds>
      <fluent>
        <Situation>
          <Reify>
            <Operation type="ruleml:DeonticOperator" iri="ruleml:Obliged">
              <Neg>
                <Atom><Rel>q</Rel><Var>X</Var></Atom>
              </Neg>
            </Operation>        
          </Reify>
        </Situation>  
      </fluent>
      <at><Time><Ind>t1</Ind></Time></at>
    </Holds>
  </Query>
</RuleML>
