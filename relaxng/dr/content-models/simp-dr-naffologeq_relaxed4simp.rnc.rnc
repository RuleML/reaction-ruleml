default namespace ruleml = "http://ruleml.org/spec"

start =
  RuleML
  | Assert
  | Retract
  | Query
  | Atom
  | Rel
  | And
  | Or
  | Implies
  | Forall
  | Exists
  | Expr
  | Fun
  | Rulebase
  | Entails
  | Neg
  | Naf
  | Equivalent
  | Equal
  | Data
  | Skolem
  | Reify
  | Ind
  | Var
  | Plex
  | Rule
  | Negation
  | Quantifier
  | Profile
  | Time
  | Spatial
  | Interval
  | Operator
  | After
  | Before
  | Every
  | Any
  | Timer
  | During
  | Overlaps
  | Starts
  | Precedes
  | Succeeds
  | Meets
  | Finishes
  | formula
  | formula_2
  | op
  | formula_3
  | formula_4
  | then
  | if
  | if_2
  | then_2
  | else
  | declare
  | formula_5
  | formula_6
  | op_2
  | formula_7
  | then_3
  | if_3
  | degree
  | strong
  | weak
  | meta
  | torso
  | oid
  | slot
  | left
  | right
  | arg
  | resl
  | repo
  | scope
  | guard
  | evaluation
  | signature
  | qualification
  | quantification
  | formula_8
  | arg_2
  | arg_3
  | arg_4
  | content
RuleML =
  element RuleML {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (act | (Assert | Retract | Query)*)+
  }
Assert =
  element Assert {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute safety {
         "non-interrupting" | "interrupting" | "transactional"
       }?
     & attribute size { xsd:int }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (formula
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Entails
     | Rulebase
     | Rule
     | Quantifier)*
  }
Retract =
  element Retract {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (formula
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Entails
     | Rulebase
     | Rule
     | Quantifier)*
  }
Query =
  element Query {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute closure { "universal" | "existential" }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (formula_2
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And
     | Or
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists_2
     | Entails
     | Rulebase
     | Quantifier)*
  }
Atom =
  element Atom {
    (attribute closure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?
     & degree?),
    ((op | Rel)
     & (arg
        | Skolem
        | Reify
        | Ind
        | Data
        | Time
        | Spatial
        | Interval_2
        | Var
        | Expr
        | Plex)*
     & repo?
     & slot*
     & resl?)
  }
Rel =
  element Rel {
    (attribute iri { xsd:anyURI }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute per {
         "copy" | "value" | "open" | "effect" | "modal"
       }?),
    text
  }
And =
  element And {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute closure { "universal" | "existential" }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (formula_9
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And
     | Or
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists_2
     | Quantifier)*
  }
Or =
  element Or {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute closure { "universal" | "existential" }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (formula_10
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And
     | Or
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists_2
     | Quantifier)*
  }
Implies =
  element Implies {
    (attribute direction { "bidirectional" | "forward" | "backward" }?
     & attribute material { "yes" | "no" }?
     & attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute closure { "universal" | "existential" }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (((Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And
       | Or
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists_2
       | Quantifier),
      (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Quantifier))
     | ((Atom
         | Equal
         | Time
         | Spatial
         | Interval
         | Operator
         | And
         | Or
         | Neg
         | Negation
         | Naf
         | Implies
         | Equivalent
         | Forall
         | Exists_2
         | Quantifier),
        then_2)
     | (if_2,
        (Atom
         | Equal
         | Time
         | Spatial
         | Interval
         | Operator
         | And_2
         | Or_2
         | Neg
         | Negation
         | Naf
         | Implies
         | Equivalent
         | Forall
         | Exists
         | Quantifier))
     | (if_2 & then_2)
     | ((Atom
         | Equal
         | Time
         | Spatial
         | Interval
         | Operator
         | And_2
         | Or_2
         | Neg
         | Negation
         | Naf
         | Implies
         | Equivalent
         | Forall
         | Exists
         | Quantifier),
        if_2)
     | (then_2,
        (Atom
         | Equal
         | Time
         | Spatial
         | Interval
         | Operator
         | And
         | Or
         | Neg
         | Negation
         | Naf
         | Implies
         | Equivalent
         | Forall
         | Exists_2
         | Quantifier)))
  }
Forall =
  element Forall {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (declare | Var)+,
    (formula_5
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Rule
     | Quantifier)
  }
Exists =
  element Exists {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (declare | Var)+,
    (formula_6
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Quantifier)
  }
Expr =
  element Expr {
    (attribute per { "copy" | "value" | "open" | "effect" | "modal" }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    ((op_2 | Fun)
     & (arg
        | Skolem
        | Reify
        | Ind
        | Data
        | Time
        | Spatial
        | Interval_2
        | Var
        | Expr
        | Plex)*
     & repo?
     & slot*
     & resl?)
  }
Fun =
  element Fun {
    (attribute per { "copy" | "value" | "open" | "effect" | "modal" }?
     & attribute val { "1" | "0.." }?
     & attribute iri { xsd:anyURI }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    text
  }
Rulebase =
  element Rulebase {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (formula_7
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Rule
     | Quantifier)*
  }
Entails =
  element Entails {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    ((Rulebase, Rulebase)
     | (Rulebase, then_3)
     | (if_3, Rulebase)
     | (if_3 & then_3)
     | (Rulebase, if_3)
     | (then_3, Rulebase))
  }
Neg =
  element Neg {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (strong
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Quantifier)
  }
Naf =
  element Naf {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (weak
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Quantifier)
  }
Equivalent =
  element Equivalent {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute closure { "universal" | "existential" }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (torso
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Quantifier),
    (torso
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Quantifier)
  }
Equal =
  element Equal {
    (attribute oriented { "no" | "yes" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?
     & degree?),
    (left
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex),
    (right
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex)
  }
Data =
  element Data {
    attribute node { xsd:anyURI }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & text
    & _1*
  }
Skolem =
  element Skolem {
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI
     }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    text
  }
Reify =
  element Reify {
    attribute node { xsd:anyURI }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (RuleML
       | Assert
       | Retract
       | Query
       | Atom
       | Rel
       | And
       | Or
       | Implies
       | Forall
       | Exists
       | Expr
       | Fun
       | Rulebase
       | Entails
       | Neg
       | Naf
       | Equivalent
       | Equal
       | Data
       | Skolem
       | Reify
       | Ind
       | Var
       | Plex
       | Rule
       | Negation
       | Quantifier
       | Profile
       | Time
       | Spatial
       | Interval
       | Operator
       | After
       | Before
       | Every
       | Any
       | Timer
       | During
       | Overlaps
       | Starts
       | Precedes
       | Succeeds
       | Meets
       | Finishes
       | formula
       | formula_2
       | op
       | formula_3
       | formula_4
       | then
       | if
       | if_2
       | then_2
       | else
       | declare
       | formula_5
       | formula_6
       | op_2
       | formula_7
       | then_3
       | if_3
       | degree
       | strong
       | weak
       | meta
       | torso
       | oid
       | slot
       | left
       | right
       | arg
       | resl
       | repo
       | scope
       | guard
       | evaluation
       | signature
       | qualification
       | quantification
       | formula_8
       | arg_2
       | arg_3
       | arg_4
       | content)*
  }
Ind =
  element Ind {
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    text
  }
Var =
  element Var {
    (attribute type {
       xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
       | xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
       | xsd:anyURI
     }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute mode { "+" | "-" | "?" }?),
    text
  }
Plex =
  element Plex {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    ((arg
      | Skolem
      | Reify
      | Ind
      | Data
      | Time
      | Spatial
      | Interval_2
      | Var
      | Expr
      | Plex)*
     & repo?
     & slot*
     & resl?)
  }
Rule =
  element Rule {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (((Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And
       | Or
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists_2
       | Quantifier),
      (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Quantifier),
      (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Quantifier))
     | ((((Atom
           | Equal
           | Time
           | Spatial
           | Interval
           | Operator
           | And
           | Or
           | Neg
           | Negation
           | Naf
           | Implies
           | Equivalent
           | Forall
           | Exists_2
           | Quantifier),
          (Atom
           | Equal
           | Time
           | Spatial
           | Interval
           | Operator
           | And_2
           | Or_2
           | Neg
           | Negation
           | Naf
           | Implies
           | Equivalent
           | Forall
           | Exists
           | Quantifier))
         | ((Atom
             | Equal
             | Time
             | Spatial
             | Interval
             | Operator
             | And
             | Or
             | Neg
             | Negation
             | Naf
             | Implies
             | Equivalent
             | Forall
             | Exists_2
             | Quantifier),
            then_2)
         | (if_2,
            (Atom
             | Equal
             | Time
             | Spatial
             | Interval
             | Operator
             | And_2
             | Or_2
             | Neg
             | Negation
             | Naf
             | Implies
             | Equivalent
             | Forall
             | Exists
             | Quantifier))
         | (if_2 & then_2)
         | ((Atom
             | Equal
             | Time
             | Spatial
             | Interval
             | Operator
             | And_2
             | Or_2
             | Neg
             | Negation
             | Naf
             | Implies
             | Equivalent
             | Forall
             | Exists
             | Quantifier),
            if_2)
         | (then_2,
            (Atom
             | Equal
             | Time
             | Spatial
             | Interval
             | Operator
             | And
             | Or
             | Neg
             | Negation
             | Naf
             | Implies
             | Equivalent
             | Forall
             | Exists_2
             | Quantifier)))
        & else?))?,
    (attribute direction { "bidirectional" | "forward" | "backward" }?
     & attribute material { "yes" | "no" }?
     & attribute style { "active" | "messaging" | "reasoning" }?
     & attribute closure { "universal" | "existential" }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Negation =
  element Negation {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (formula_8
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Quantifier),
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Quantifier =
  element Quantifier {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (declare | Var)+,
    (formula_11
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Rule
     | Quantifier)?,
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Profile =
  element Profile {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (formula
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Entails
     | Rulebase
     | Rule
     | Quantifier
     | content)*,
    (attribute iri { xsd:anyURI }?
     & attribute direction { "bidirectional" | "forward" | "backward" }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute safety {
         "non-interrupting" | "interrupting" | "transactional"
       }?
     & attribute size { xsd:int }?)
  }
Time =
  element Time {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (content_2*
     | ((arg_2
         | Skolem
         | Reify
         | Ind
         | Data
         | Time
         | Spatial
         | Interval_2
         | Var
         | Expr
         | Plex
         | After
         | Before
         | Every
         | Any
         | Timer
         | Operator_2)*
        & repo?
        & slot*
        & resl?)),
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Spatial =
  element Spatial {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (content_3*
     | ((arg_3
         | Skolem
         | Reify
         | Ind
         | Data
         | Time
         | Spatial
         | Interval_2
         | Var
         | Expr
         | Plex
         | After
         | Before
         | Every
         | Any
         | Timer
         | Operator_2)*
        & repo?
        & slot*
        & resl?)),
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Interval =
  element Interval {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    ((arg_4
      | content_4
      | Skolem
      | Reify
      | Ind
      | Data
      | Time
      | Spatial
      | Interval_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_3),
     (arg_4
      | content_4
      | Skolem
      | Reify
      | Ind
      | Data
      | Time
      | Spatial
      | Interval_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_3)?)?,
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Operator =
  element Operator {
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (formula_7
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Rule
     | Quantifier)
  }
After =
  element After {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    ((arg_4
      | content_4
      | Skolem
      | Reify
      | Ind
      | Data
      | Time
      | Spatial
      | Interval_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_3),
     (arg_4
      | content_4
      | Skolem
      | Reify
      | Ind
      | Data
      | Time
      | Spatial
      | Interval_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_3)?)?,
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Before =
  element Before {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    ((arg_4
      | content_4
      | Skolem
      | Reify
      | Ind
      | Data
      | Time
      | Spatial
      | Interval_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_3),
     (arg_4
      | content_4
      | Skolem
      | Reify
      | Ind
      | Data
      | Time
      | Spatial
      | Interval_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_3)?)?,
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Every =
  element Every {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3)?,
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Any =
  element Any {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3)*,
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Timer =
  element Timer {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    ((arg_4
      | content_4
      | Skolem
      | Reify
      | Ind
      | Data
      | Time
      | Spatial
      | Interval_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_3),
     (arg_4
      | content_4
      | Skolem
      | Reify
      | Ind
      | Data
      | Time
      | Spatial
      | Interval_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_3)?)?,
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
During =
  element During {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Overlaps =
  element Overlaps {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Starts =
  element Starts {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Precedes =
  element Precedes {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Succeeds =
  element Succeeds {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Meets =
  element Meets {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Finishes =
  element Finishes {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
formula =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Entails
       | Rulebase
       | Rule
       | Quantifier)
  }
formula_2 =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And
       | Or
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists_2
       | Entails
       | Rulebase
       | Quantifier)
  }
op =
  element op {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Rel
  }
formula_3 =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Quantifier)
  }
formula_4 =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Quantifier)
  }
then =
  element then {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Quantifier)
  }
if =
  element if {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And
       | Or
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists_2
       | Quantifier)
  }
if_2 =
  element if {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And
       | Or
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists_2
       | Quantifier)
  }
then_2 =
  element then {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Quantifier)
  }
else =
  element else {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Quantifier)
  }
declare =
  element declare {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Var
  }
formula_5 =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Rule
       | Quantifier)
  }
formula_6 =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Quantifier)
  }
op_2 =
  element op {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Fun
  }
formula_7 =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Rule
       | Quantifier)
  }
then_3 =
  element then {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Rulebase
  }
if_3 =
  element if {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Rulebase
  }
degree =
  element degree {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Data
  }
strong =
  element strong {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Quantifier)
  }
weak =
  element weak {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Quantifier)
  }
meta =
  element meta {
    attribute index { xsd:positiveInteger }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Entails
       | Rulebase
       | Rule
       | Quantifier)
  }
torso =
  element torso {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And_2
       | Or_2
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists
       | Quantifier)
  }
oid =
  element oid {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Skolem
       | Reify
       | Ind
       | Data
       | Time
       | Spatial
       | Interval_2
       | Var
       | Expr
       | Plex)
  }
slot =
  element slot {
    (attribute card { xsd:nonNegativeInteger }?
     & attribute weight {
         xsd:decimal { minInclusive = "0.0" maxInclusive = "1.0" }
       }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (Ind | Data | Time | Spatial | Interval_2 | Expr | Plex),
    (Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex)
  }
left =
  element left {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Skolem
       | Reify
       | Ind
       | Data
       | Time
       | Spatial
       | Interval_2
       | Var
       | Expr
       | Plex)
  }
right =
  element right {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Skolem
       | Reify
       | Ind
       | Data
       | Time
       | Spatial
       | Interval_2
       | Var
       | Expr
       | Plex)
  }
arg =
  element arg {
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex)
  }
resl =
  element resl {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Var | Plex_2)
  }
repo =
  element repo {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Var | Plex_3)
  }
scope =
  element scope {
    (Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And
     | Or
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists_2
     | Entails
     | Rulebase
     | Quantifier)?,
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
guard =
  element guard {
    (Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And
     | Or
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists_2
     | Quantifier),
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
evaluation =
  element evaluation {
    Profile,
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
signature =
  element signature {
    (Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And
     | Or
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists_2
     | Entails
     | Rulebase
     | Quantifier),
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
qualification =
  element qualification {
    (Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Entails
     | Rulebase
     | Rule
     | Quantifier),
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
quantification =
  element quantification {
    (Forall_2 | Exists_3 | Quantifier),
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
formula_8 =
  element formula {
    (Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Quantifier),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
arg_2 =
  element arg {
    (Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | After
     | Before
     | Every
     | Any
     | Timer
     | Operator_2),
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
arg_3 =
  element arg {
    (Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | After
     | Before
     | Every
     | Any
     | Timer
     | Operator_2),
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
arg_4 =
  element arg {
    (Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (attribute index { xsd:positiveInteger }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
content =
  element content {
    ((text & _2*)
     | RuleML
     | Assert
     | Retract
     | Query
     | Atom
     | Rel
     | And
     | Or
     | Implies
     | Forall
     | Exists
     | Expr
     | Fun
     | Rulebase
     | Entails
     | Neg
     | Naf
     | Equivalent
     | Equal
     | Data
     | Skolem
     | Reify
     | Ind
     | Var
     | Plex
     | Rule
     | Negation
     | Quantifier
     | Profile
     | Time
     | Spatial
     | Interval
     | Operator
     | After
     | Before
     | Every
     | Any
     | Timer
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | formula
     | formula_2
     | op
     | formula_3
     | formula_4
     | then
     | if
     | if_2
     | then_2
     | else
     | declare
     | formula_5
     | formula_6
     | op_2
     | formula_7
     | then_3
     | if_3
     | degree
     | strong
     | weak
     | meta
     | torso
     | oid
     | slot
     | left
     | right
     | arg
     | resl
     | repo
     | scope
     | guard
     | evaluation
     | signature
     | qualification
     | quantification
     | formula_8
     | arg_2
     | arg_3
     | arg_4
     | content),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
act =
  element act {
    (attribute index { xsd:positiveInteger }
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (Assert | Retract | Query)*
  }
And_2 =
  element And {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (formula_3
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Quantifier)*
  }
Or_2 =
  element Or {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (formula_4
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Quantifier)*
  }
Exists_2 =
  element Exists {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (declare | Var)+,
    (formula_12
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And
     | Or
     | Neg
     | Negation
     | Naf
     | Implies
     | Equivalent
     | Forall
     | Exists_2
     | Quantifier)
  }
Interval_2 =
  element Interval {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    ((arg_4
      | content_4
      | Skolem
      | Reify
      | Ind
      | Data
      | Time
      | Spatial
      | Interval_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_3),
     (arg_4
      | content_4
      | Skolem
      | Reify
      | Ind
      | Data
      | Time
      | Spatial
      | Interval_2
      | Var
      | Expr
      | Plex
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Equal_2
      | Finishes
      | Operator_3)?)?,
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
formula_9 =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And
       | Or
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists_2
       | Quantifier)
  }
formula_10 =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And
       | Or
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists_2
       | Quantifier)
  }
_1 =
  element * {
    attribute * { text }*,
    (text & _1*)
  }
formula_11 =
  element formula {
    (Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Rule
     | Quantifier),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
content_2 =
  element content {
    ((text & _2*)
     | RuleML
     | Assert
     | Retract
     | Query
     | Atom
     | Rel
     | And
     | Or
     | Implies
     | Forall
     | Exists
     | Expr
     | Fun
     | Rulebase
     | Entails
     | Neg
     | Naf
     | Equivalent
     | Equal
     | Data
     | Skolem
     | Reify
     | Ind
     | Var
     | Plex
     | Rule
     | Negation
     | Quantifier
     | Profile
     | Time
     | Spatial
     | Interval
     | Operator
     | After
     | Before
     | Every
     | Any
     | Timer
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | formula
     | formula_2
     | op
     | formula_3
     | formula_4
     | then
     | if
     | if_2
     | then_2
     | else
     | declare
     | formula_5
     | formula_6
     | op_2
     | formula_7
     | then_3
     | if_3
     | degree
     | strong
     | weak
     | meta
     | torso
     | oid
     | slot
     | left
     | right
     | arg
     | resl
     | repo
     | scope
     | guard
     | evaluation
     | signature
     | qualification
     | quantification
     | formula_8
     | arg_2
     | arg_3
     | arg_4
     | content),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Operator_2 =
  element Operator {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3)*,
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
content_3 =
  element content {
    ((text & _2*)
     | RuleML
     | Assert
     | Retract
     | Query
     | Atom
     | Rel
     | And
     | Or
     | Implies
     | Forall
     | Exists
     | Expr
     | Fun
     | Rulebase
     | Entails
     | Neg
     | Naf
     | Equivalent
     | Equal
     | Data
     | Skolem
     | Reify
     | Ind
     | Var
     | Plex
     | Rule
     | Negation
     | Quantifier
     | Profile
     | Time
     | Spatial
     | Interval
     | Operator
     | After
     | Before
     | Every
     | Any
     | Timer
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | formula
     | formula_2
     | op
     | formula_3
     | formula_4
     | then
     | if
     | if_2
     | then_2
     | else
     | declare
     | formula_5
     | formula_6
     | op_2
     | formula_7
     | then_3
     | if_3
     | degree
     | strong
     | weak
     | meta
     | torso
     | oid
     | slot
     | left
     | right
     | arg
     | resl
     | repo
     | scope
     | guard
     | evaluation
     | signature
     | qualification
     | quantification
     | formula_8
     | arg_2
     | arg_3
     | arg_4
     | content),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
content_4 =
  element content {
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    ((text & _2*)
     | RuleML
     | Assert
     | Retract
     | Query
     | Atom
     | Rel
     | And
     | Or
     | Implies
     | Forall
     | Exists
     | Expr
     | Fun
     | Rulebase
     | Entails
     | Neg
     | Naf
     | Equivalent
     | Equal
     | Data
     | Skolem
     | Reify
     | Ind
     | Var
     | Plex
     | Rule
     | Negation
     | Quantifier
     | Profile
     | Time
     | Spatial
     | Interval
     | Operator
     | After
     | Before
     | Every
     | Any
     | Timer
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | formula
     | formula_2
     | op
     | formula_3
     | formula_4
     | then
     | if
     | if_2
     | then_2
     | else
     | declare
     | formula_5
     | formula_6
     | op_2
     | formula_7
     | then_3
     | if_3
     | degree
     | strong
     | weak
     | meta
     | torso
     | oid
     | slot
     | left
     | right
     | arg
     | resl
     | repo
     | scope
     | guard
     | evaluation
     | signature
     | qualification
     | quantification
     | formula_8
     | arg_2
     | arg_3
     | arg_4
     | content)
  }
Equal_2 =
  element Equal {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Operator_3 =
  element Operator {
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (arg_4
     | content_4
     | Skolem
     | Reify
     | Ind
     | Data
     | Time
     | Spatial
     | Interval_2
     | Var
     | Expr
     | Plex
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Equal_2
     | Finishes
     | Operator_3),
    (attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Plex_2 =
  element Plex {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (slot* & resl?)
  }
Plex_3 =
  element Plex {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    ((arg
      | Skolem
      | Reify
      | Ind
      | Data
      | Time
      | Spatial
      | Interval_2
      | Var
      | Expr
      | Plex)*
     & repo?)
  }
Forall_2 =
  element Forall {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (declare | Var)+,
    (formula_11
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Rule
     | Quantifier)?
  }
Exists_3 =
  element Exists {
    (attribute mapMaterial { "yes" | "no" }?
     & attribute mapDirection {
         "bidirectional" | "forward" | "backward"
       }?
     & attribute mapClosure { "universal" | "existential" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (meta*
     & scope*
     & guard*
     & evaluation*
     & signature*
     & qualification*
     & quantification*
     & oid?),
    (declare | Var)+,
    (formula_11
     | Atom
     | Equal
     | Time
     | Spatial
     | Interval
     | Operator
     | And_2
     | Or_2
     | Neg
     | Negation
     | Implies
     | Equivalent
     | Forall
     | Exists
     | Rule
     | Quantifier)?
  }
_2 =
  element * - ruleml:* {
    (_3
     | attribute * { text }
     | text)+
  }
formula_12 =
  element formula {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Atom
       | Equal
       | Time
       | Spatial
       | Interval
       | Operator
       | And
       | Or
       | Neg
       | Negation
       | Naf
       | Implies
       | Equivalent
       | Forall
       | Exists_2
       | Quantifier)
  }
_3 =
  element * {
    (_3
     | attribute * { text }
     | text)+
  }
