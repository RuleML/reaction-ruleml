default namespace = "http://ruleml.org/spec"
namespace ns1 = "http://www.w3.org/2001/XMLSchema-instance"

start = RuleML | Assert | Retract | Query
RuleML =
  element RuleML {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (act | Assert | Retract | Query)*,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Assert =
  element Assert {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (formula
     | Rulebase
     | Atom
     | Implies
     | Rule
     | Equivalent
     | Entails
     | Forall
     | Quantifier
     | Negation
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval)*,
    attribute mapDirection {
      "bidirectional" | "forward" | "backward"
    }?,
    attribute mapClosure { "universal" | "existential" }?,
    attribute mapMaterial { "yes" | "no" }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    attribute safety {
      "non-interrupting" | "interrupting" | "transactional"
    }?,
    attribute size { xsd:int }?
  }
Retract =
  element Retract {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (formula
     | Rulebase
     | Atom
     | Implies
     | Rule
     | Equivalent
     | Entails
     | Forall
     | Quantifier
     | Negation
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval)*,
    attribute mapDirection {
      "bidirectional" | "forward" | "backward"
    }?,
    attribute mapClosure { "universal" | "existential" }?,
    attribute mapMaterial { "yes" | "no" }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Query =
  element Query {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (formula_2
     | Rulebase
     | Atom
     | Entails
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Exists
     | Quantifier
     | Time
     | Spatial
     | Interval)*,
    attribute closure { "universal" | "existential" }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
meta =
  element meta {
    (Rulebase
     | Atom
     | Implies
     | Rule
     | Equivalent
     | Entails
     | Forall
     | Quantifier
     | Negation
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval),
    attribute index { xsd:positiveInteger }?,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
scope =
  element scope {
    (Rulebase
     | Atom
     | Entails
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Exists
     | Quantifier
     | Time
     | Spatial
     | Interval)?,
    attribute index { xsd:positiveInteger }?,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
guard =
  element guard {
    (Atom
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval),
    attribute index { xsd:positiveInteger }?,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
evaluation =
  element evaluation {
    Profile,
    attribute index { xsd:positiveInteger }?,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
signature =
  element signature {
    (Rulebase
     | Atom
     | Entails
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Exists
     | Quantifier
     | Time
     | Spatial
     | Interval),
    attribute index { xsd:positiveInteger }?,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
qualification =
  element qualification {
    (Rulebase
     | Atom
     | Implies
     | Rule
     | Equivalent
     | Entails
     | Forall
     | Quantifier
     | Negation
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval),
    attribute index { xsd:positiveInteger }?,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
quantification =
  element quantification {
    (Forall_2 | Exists_2 | Quantifier),
    attribute index { xsd:positiveInteger }?,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
oid =
  element oid {
    (Skolem
     | Reify
     | Ind
     | Data
     | Data_2
     | Data_3
     | Time
     | Spatial
     | Interval
     | Var
     | Expr
     | Plex),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
act =
  element act {
    (Assert | Retract | Query),
    attribute index { xsd:positiveInteger }?,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
formula =
  element formula {
    (Rulebase
     | Atom
     | Implies
     | Rule
     | Equivalent
     | Entails
     | Forall
     | Quantifier
     | Negation
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Rulebase =
  element Rulebase {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (formula_3
     | Atom
     | Implies
     | Rule
     | Equivalent
     | Forall
     | Quantifier
     | Negation
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval)*,
    attribute mapClosure { "universal" | "existential" }?,
    attribute mapDirection {
      "bidirectional" | "forward" | "backward"
    }?,
    attribute mapMaterial { "yes" | "no" }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Atom =
  element Atom {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute closure { "universal" | "existential" }?),
    ((meta*,
      scope*,
      guard*,
      evaluation*,
      signature*,
      qualification*,
      quantification*,
      oid?)
     & degree?),
    ((Rel | op)
     & (Skolem
        | Reify
        | Ind
        | Data
        | Data_2
        | Data_3
        | Time
        | Spatial
        | Interval
        | Var
        | Expr
        | Plex
        | arg)*
     & repo?
     & slot*
     & resl?)
  }
Implies =
  element Implies {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((if & then)
     | ((Atom
         | And_2
         | Or_2
         | Negation
         | Naf
         | Neg
         | Equal
         | Time
         | Spatial
         | Interval),
        (Atom | Negation | Neg | Equal | Time | Spatial | Interval))),
    attribute closure { "universal" | "existential" }?,
    attribute direction { "bidirectional" | "forward" | "backward" }?,
    attribute material { "yes" | "no" }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Rule =
  element Rule {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((if & then & else?)
     | ((Atom
         | And_2
         | Or_2
         | Negation
         | Naf
         | Neg
         | Equal
         | Time
         | Spatial
         | Interval),
        (Atom | Negation | Neg | Equal | Time | Spatial | Interval),
        (Atom | Negation | Neg | Equal | Time | Spatial | Interval)?))?,
    (attribute direction { "bidirectional" | "forward" | "backward" }?
     & attribute material { "yes" | "no" }?
     & attribute style { "reasoning" | "active" | "messaging" }?
     & attribute closure { "universal" | "existential" }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Equivalent =
  element Equivalent {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (torso | Atom | Negation | Neg | Equal | Time | Spatial | Interval),
    (torso | Atom | Negation | Neg | Equal | Time | Spatial | Interval),
    attribute closure { "universal" | "existential" }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Entails =
  element Entails {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (if_2 | Rulebase),
    (then_2 | Rulebase),
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Forall =
  element Forall {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (declare | Var)+,
    (formula_4
     | Atom
     | Implies
     | Rule
     | Equivalent
     | Forall
     | Quantifier
     | Negation
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval),
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Quantifier =
  element Quantifier {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (declare | Var)+,
    (formula_4
     | Atom
     | Implies
     | Rule
     | Equivalent
     | Forall
     | Quantifier
     | Negation
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval)?,
    attribute iri { xsd:anyURI }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI
    }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Negation =
  element Negation {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (formula_5
     | Atom
     | Equal
     | Negation
     | Naf
     | Neg
     | Time
     | Spatial
     | Interval),
    attribute iri { xsd:anyURI }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI
    }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Neg =
  element Neg {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (strong
     | Atom
     | Equal
     | Negation
     | Naf
     | Neg
     | Time
     | Spatial
     | Interval),
    attribute iri { xsd:anyURI }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI
    }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Equal =
  element Equal {
    (attribute oriented { "no" | "yes" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    ((meta*,
      scope*,
      guard*,
      evaluation*,
      signature*,
      qualification*,
      quantification*,
      oid?)
     & degree?),
    (Skolem
     | Reify
     | Ind
     | Data
     | Data_2
     | Data_3
     | Time
     | Spatial
     | Interval
     | Var
     | Expr
     | Plex
     | left),
    (Skolem
     | Reify
     | Ind
     | Data
     | Data_2
     | Data_3
     | Time
     | Spatial
     | Interval
     | Var
     | Expr
     | Plex
     | right)
  }
Time =
  element Time {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (slot*
     | resl?
     | (arg_2
        | Skolem
        | Reify
        | Ind
        | Data
        | Data_2
        | Data_3
        | Time
        | Spatial
        | Interval
        | Var
        | Expr
        | Plex)+
     | repo?
     | repo
     | slot*
     | resl?
     | content*),
    attribute iri { xsd:anyURI }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI
    }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Spatial =
  element Spatial {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (slot*
     | resl?
     | (arg_3
        | Skolem
        | Reify
        | Ind
        | Data
        | Data_2
        | Data_3
        | Time
        | Spatial
        | Interval
        | Var
        | Expr
        | Plex)+
     | repo?
     | repo
     | slot*
     | resl?
     | content_2*),
    attribute iri { xsd:anyURI }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI
    }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Interval =
  element Interval {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((arg_4, arg_4?)
     | (content_3, content_3?)
     | (Time, Time?)
     | (Spatial, Spatial?)
     | (Interval, Interval?)
     | ((Skolem
         | Reify
         | Ind
         | Data
         | Data_2
         | Data_3
         | Time
         | Spatial
         | Interval
         | Var
         | Expr
         | Plex),
        (Skolem
         | Reify
         | Ind
         | Data
         | Data_2
         | Data_3
         | Time
         | Spatial
         | Interval
         | Var
         | Expr
         | Plex)?))?,
    attribute iri { xsd:anyURI }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI
    }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
formula_2 =
  element formula {
    (Rulebase
     | Atom
     | Entails
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Exists
     | Quantifier
     | Time
     | Spatial
     | Interval),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
And =
  element And {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (formula_6
     | Atom
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval)*,
    attribute closure { "universal" | "existential" }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Or =
  element Or {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (formula_6
     | Atom
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval)*,
    attribute closure { "universal" | "existential" }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Naf =
  element Naf {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (weak
     | Atom
     | Equal
     | Negation
     | Naf
     | Neg
     | Time
     | Spatial
     | Interval),
    attribute iri { xsd:anyURI }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI
    }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Exists =
  element Exists {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (declare | Var)+,
    (formula_7
     | Atom
     | Exists
     | Quantifier
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval),
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
And_2 =
  element And {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (formula_6
     | Atom
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval)*,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Or_2 =
  element Or {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (formula_6
     | Atom
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval)*,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Profile =
  element Profile {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    content_4*,
    attribute iri { xsd:anyURI }?,
    attribute direction { "bidirectional" | "forward" | "backward" }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI
    }?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    attribute safety {
      "non-interrupting" | "interrupting" | "transactional"
    }?,
    attribute size { xsd:int }?
  }
Forall_2 =
  element Forall {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (declare | Var)+,
    (formula_4
     | Atom
     | Implies
     | Rule
     | Equivalent
     | Forall
     | Quantifier
     | Negation
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval)?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Exists_2 =
  element Exists {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (declare | Var)+,
    (formula_4
     | Atom
     | Implies
     | Rule
     | Equivalent
     | Forall
     | Quantifier
     | Negation
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval)?,
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Skolem =
  element Skolem {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?),
    text
  }
Reify =
  element Reify {
    attribute node { xsd:anyURI }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute ns1:schemaLocation { text }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Equal
       | Data_2
       | Data_3
       | Skolem
       | Reify
       | Ind
       | Var
       | Atom
       | Rel
       | Expr
       | Fun
       | Plex
       | RuleML
       | Assert
       | Query
       | Forall
       | Exists
       | Implies
       | Entails
       | Equivalent
       | Rulebase
       | And_2
       | Or_2
       | Negation
       | Naf
       | Neg
       | Profile
       | Time
       | Spatial
       | Interval
       | left
       | right
       | arg
       | op
       | slot
       | resl
       | repo
       | degree
       | op_2)*
  }
Ind =
  element Ind {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute iri { xsd:anyURI }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?),
    text
  }
Data =
  element Data {
    (attribute ns1:type { xsd:QName "duration" },
     xsd:duration)
    | (attribute ns1:type { xsd:QName "dateTime" },
       xsd:dateTime)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "dateTime" },
       xsd:dateTime)
    | (attribute ns1:type { xsd:QName "time" },
       xsd:time)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "time" },
       xsd:time)
    | (attribute ns1:type { xsd:QName "date" },
       xsd:date)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "date" },
       xsd:date)
    | (attribute ns1:type { xsd:QName "gYearMonth" },
       xsd:gYearMonth)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "gYearMonth" },
       xsd:gYearMonth)
    | (attribute ns1:type { xsd:QName "gYear" },
       xsd:gYear)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "gYear" },
       xsd:gYear)
    | (attribute ns1:type { xsd:QName "gMonthDay" },
       xsd:gMonthDay)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "gMonthDay" },
       xsd:gMonthDay)
    | (attribute ns1:type { xsd:QName "gDay" },
       xsd:gDay)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "gDay" },
       xsd:gDay)
    | (attribute ns1:type { xsd:QName "gMonth" },
       xsd:gMonth)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "gMonth" },
       xsd:gMonth)
    | (attribute ns1:type { xsd:QName "boolean" },
       xsd:boolean)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "boolean" },
       xsd:boolean)
    | (attribute ns1:type { xsd:QName "base64Binary" },
       xsd:base64Binary)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "base64Binary" },
       xsd:base64Binary)
    | (attribute ns1:type { xsd:QName "hexBinary" },
       xsd:hexBinary)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "hexBinary" },
       xsd:hexBinary)
    | (attribute ns1:type { xsd:QName "float" },
       xsd:float)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "float" },
       xsd:float)
    | (attribute ns1:type { xsd:QName "decimal" },
       xsd:decimal)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "decimal" },
       xsd:decimal)
    | (attribute ns1:type { xsd:QName "double" },
       xsd:double)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "double" },
       xsd:double)
    | (attribute ns1:type { xsd:QName "anyURI" },
       xsd:anyURI)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "anyURI" },
       xsd:anyURI)
    | (attribute ns1:type { xsd:QName "QName" },
       xsd:QName)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "QName" },
       xsd:QName)
    | (attribute ns1:type { xsd:QName "NOTATION" },
       xsd:NOTATION)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "NOTATION" },
       xsd:NOTATION)
    | (attribute ns1:type { xsd:QName "string" },
       xsd:string)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "string" },
       xsd:string)
    | (attribute ns1:type { xsd:QName "normalizedString" },
       xsd:normalizedString)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "normalizedString" },
       xsd:normalizedString)
    | (attribute ns1:type { xsd:QName "token" },
       xsd:token)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "token" },
       xsd:token)
    | (attribute ns1:type { xsd:QName "language" },
       xsd:language)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "language" },
       xsd:language)
    | (attribute ns1:type { xsd:QName "Name" },
       xsd:Name)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "Name" },
       xsd:Name)
    | (attribute ns1:type { xsd:QName "NCName" },
       xsd:NCName)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "NCName" },
       xsd:NCName)
    | (attribute ns1:type { xsd:QName "NMTOKEN" },
       xsd:NMTOKEN)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "NMTOKEN" },
       xsd:NMTOKEN)
    | (attribute ns1:type { xsd:QName "NMTOKENS" },
       xsd:NMTOKENS)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "NMTOKENS" },
       xsd:NMTOKENS)
    | (attribute ns1:type { xsd:QName "ENTITY" },
       xsd:ENTITY)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "ENTITY" },
       xsd:ENTITY)
    | (attribute ns1:type { xsd:QName "ENTITIES" },
       xsd:ENTITIES)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "ENTITIES" },
       xsd:ENTITIES)
    | (attribute ns1:type { xsd:QName "integer" },
       xsd:integer)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "integer" },
       xsd:integer)
    | (attribute ns1:type { xsd:QName "nonPositiveInteger" },
       xsd:nonPositiveInteger)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "nonPositiveInteger" },
       xsd:nonPositiveInteger)
    | (attribute ns1:type { xsd:QName "negativeInteger" },
       xsd:negativeInteger)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "negativeInteger" },
       xsd:negativeInteger)
    | (attribute ns1:type { xsd:QName "long" },
       xsd:long)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "long" },
       xsd:long)
    | (attribute ns1:type { xsd:QName "int" },
       xsd:int)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "int" },
       xsd:int)
    | (attribute ns1:type { xsd:QName "short" },
       xsd:short)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "short" },
       xsd:short)
    | (attribute ns1:type { xsd:QName "byte" },
       xsd:byte)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "byte" },
       xsd:byte)
    | (attribute ns1:type { xsd:QName "nonNegativeInteger" },
       xsd:nonNegativeInteger)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "nonNegativeInteger" },
       xsd:nonNegativeInteger)
    | (attribute ns1:type { xsd:QName "unsignedLong" },
       xsd:unsignedLong)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "unsignedLong" },
       xsd:unsignedLong)
    | (attribute ns1:type { xsd:QName "unsignedInt" },
       xsd:unsignedInt)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "unsignedInt" },
       xsd:unsignedInt)
    | (attribute ns1:type { xsd:QName "unsignedByte" },
       xsd:unsignedByte)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "unsignedByte" },
       xsd:unsignedByte)
    | (attribute ns1:type { xsd:QName "positiveInteger" },
       xsd:positiveInteger)
    | ((attribute node { xsd:anyURI }?
        & attribute xml:base { xsd:anyURI }?
        & attribute xml:id { xsd:NCName }?
        & attribute ns1:schemaLocation { text }?
        & attribute key {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?
        & attribute keyref {
            xsd:string {
              minLength = "1"
              pattern =
                "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
            }
            | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
          }?),
       attribute ns1:type { xsd:QName "positiveInteger" },
       xsd:positiveInteger)
    | (attribute ns1:type { xsd:QName "anySimpleType" },
       text)
  }
Data_2 =
  element Data {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (xsd:duration
     | xsd:dateTime
     | xsd:time
     | xsd:date
     | xsd:gYearMonth
     | xsd:gYear
     | xsd:gMonthDay
     | xsd:gDay
     | xsd:gMonth
     | xsd:boolean
     | xsd:base64Binary
     | xsd:hexBinary
     | xsd:float
     | xsd:decimal
     | xsd:double
     | xsd:anyURI
     | xsd:QName
     | xsd:NOTATION
     | xsd:string)
  }
Data_3 =
  element Data {
    attribute node { xsd:anyURI }?
    & attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute ns1:schemaLocation { text }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & text
    & _1*
  }
Var =
  element Var {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?
     & attribute mode { "+" | "-" | "?" }?),
    text
  }
Expr =
  element Expr {
    (attribute per { "copy" | "value" | "open" }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute type {
         xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
         | xsd:string {
             minLength = "1"
             pattern =
               "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
           }
         | xsd:anyURI
       }?),
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((Fun | op_2)
     & (Skolem
        | Reify
        | Ind
        | Data
        | Data_2
        | Data_3
        | Time
        | Spatial
        | Interval
        | Var
        | Expr
        | Plex
        | arg)*
     & repo?
     & slot*
     & resl?)
  }
Plex =
  element Plex {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((Skolem
      | Reify
      | Ind
      | Data
      | Data_2
      | Data_3
      | Time
      | Spatial
      | Interval
      | Var
      | Expr
      | Plex
      | arg)*
     & repo?
     & slot*
     & resl?)
  }
formula_3 =
  element formula {
    (Atom
     | Implies
     | Rule
     | Equivalent
     | Forall
     | Quantifier
     | Negation
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
degree =
  element degree {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute ns1:schemaLocation { text }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Data | Data_2 | Data_3)
  }
Rel =
  element Rel {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute iri { xsd:anyURI }?
     & attribute per {
         "copy" | "value" | "effect" | "modal" | "open"
       }?),
    text
  }
op =
  element op {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute ns1:schemaLocation { text }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Rel
  }
arg =
  element arg {
    (attribute index { xsd:positiveInteger }
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    (Skolem
     | Reify
     | Ind
     | Data
     | Data_2
     | Data_3
     | Time
     | Spatial
     | Interval
     | Var
     | Expr
     | Plex)
  }
repo =
  element repo {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute ns1:schemaLocation { text }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Var | Plex_2)
  }
slot =
  element slot {
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute card { xsd:nonNegativeInteger }?
     & attribute weight {
         xsd:decimal { minInclusive = "0.0" maxInclusive = "1.0" }
       }?),
    (Ind
     | Data
     | Data_2
     | Data_3
     | Time
     | Spatial
     | Interval
     | Expr
     | Plex),
    (Skolem
     | Reify
     | Ind
     | Data
     | Data_2
     | Data_3
     | Time
     | Spatial
     | Interval
     | Var
     | Expr
     | Plex)
  }
resl =
  element resl {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute ns1:schemaLocation { text }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Var | Plex_3)
  }
if =
  element if {
    (Atom
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
then =
  element then {
    (Atom | Negation | Neg | Equal | Time | Spatial | Interval),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
else =
  element else {
    (Atom | Negation | Neg | Equal | Time | Spatial | Interval),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
torso =
  element torso {
    (Atom | Negation | Neg | Equal | Time | Spatial | Interval),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
if_2 =
  element if {
    Rulebase,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
then_2 =
  element then {
    Rulebase,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
declare =
  element declare {
    Var,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
formula_4 =
  element formula {
    (Atom
     | Implies
     | Rule
     | Equivalent
     | Forall
     | Quantifier
     | Negation
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
formula_5 =
  element formula {
    Atom | Equal | Negation | Naf | Neg | Time | Spatial | Interval
  }
strong =
  element strong {
    (Atom | Equal | Negation | Naf | Neg | Time | Spatial | Interval),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
left =
  element left {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute ns1:schemaLocation { text }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Skolem
       | Reify
       | Ind
       | Data
       | Data_2
       | Data_3
       | Time
       | Spatial
       | Interval
       | Var
       | Expr
       | Plex)
  }
right =
  element right {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute ns1:schemaLocation { text }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & (Skolem
       | Reify
       | Ind
       | Data
       | Data_2
       | Data_3
       | Time
       | Spatial
       | Interval
       | Var
       | Expr
       | Plex)
  }
arg_2 =
  element arg {
    (Skolem
     | Reify
     | Ind
     | Data
     | Data_2
     | Data_3
     | Time
     | Spatial
     | Interval
     | Var
     | Expr
     | Plex),
    attribute index { xsd:positiveInteger }?,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
content =
  element content {
    _2*,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
arg_3 =
  element arg {
    (Skolem
     | Reify
     | Ind
     | Data
     | Data_2
     | Data_3
     | Time
     | Spatial
     | Interval
     | Var
     | Expr
     | Plex),
    attribute index { xsd:positiveInteger }?,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
content_2 =
  element content {
    _2*,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
arg_4 =
  element arg {
    ((Time, Time?)
     | (Spatial, Spatial?)
     | (Interval, Interval?)
     | ((Skolem
         | Reify
         | Ind
         | Data
         | Data_2
         | Data_3
         | Time
         | Spatial
         | Interval
         | Var
         | Expr
         | Plex),
        (Skolem
         | Reify
         | Ind
         | Data
         | Data_2
         | Data_3
         | Time
         | Spatial
         | Interval
         | Var
         | Expr
         | Plex)?)),
    attribute index { xsd:positiveInteger }?,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
content_3 =
  element content {
    _2*,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
formula_6 =
  element formula {
    (Atom
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
weak =
  element weak {
    (Atom | Equal | Negation | Naf | Neg | Time | Spatial | Interval),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
formula_7 =
  element formula {
    (Atom
     | Exists
     | Quantifier
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Time
     | Spatial
     | Interval),
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
content_4 =
  element content {
    _2*,
    (attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?)
  }
Fun =
  element Fun {
    (attribute per { "copy" | "value" | "open" }?
     & attribute val { "1" | "0.." }?
     & attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute iri { xsd:anyURI }?),
    text
  }
op_2 =
  element op {
    attribute xml:base { xsd:anyURI }?
    & attribute xml:id { xsd:NCName }?
    & attribute ns1:schemaLocation { text }?
    & attribute key {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & attribute keyref {
        xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }?
    & Fun
  }
_1 =
  element * {
    attribute * { text }*,
    (text & _1*)
  }
Plex_2 =
  element Plex {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((Skolem
      | Reify
      | Ind
      | Data
      | Data_2
      | Data_3
      | Time
      | Spatial
      | Interval
      | Var
      | Expr
      | Plex
      | arg)*
     & repo?)
  }
Plex_3 =
  element Plex {
    (attribute node { xsd:anyURI }?
     & attribute xml:base { xsd:anyURI }?
     & attribute xml:id { xsd:NCName }?
     & attribute ns1:schemaLocation { text }?
     & attribute key {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?
     & attribute keyref {
         xsd:string {
           minLength = "1"
           pattern =
             "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
         }
         | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
       }?),
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (slot* & resl?)
  }
_2 = element * { text }
