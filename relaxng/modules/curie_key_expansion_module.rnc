namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dc:title [ "Reaction RuleML for DR CURIEs" ]
dc:version [ "1.0" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:creator [ "Adrian Paschke" ]
dc:subject [ "RuleML, Reaction, Deliberation, CURIE" ]
dc:description [
  "The expansion module for CURIE datatypes."
]
dc:language [ "en" ]
dcterms:rights [ "TBD" ]
dc:relation [ "http://reaction.ruleml.org" ]
start |= notAllowed

# *** @key ***

## @key: defines a unique key attribute which can be used for distributed referencing from a keyref attribute. See
## http://www.reaction.ruleml.org/1.02/glossary/#gloss-@key
key-att.choice |= key.attrib.def
key.attrib.def = attribute key { key.datatype }
key.datatype |= curieOrAbsIRI.datatype

## @keyref: defines a reference to a corresponding unique key. See
## http://www.reaction.ruleml.org/1.02/glossary/#gloss-@keyref
keyref-att.choice |= keyref.attrib.def
keyref.attrib.def = attribute keyref { keyref.datatype }
keyref.datatype |= curieOrAbsIRI.datatype

## @prefix: defines a a white space separated list of prefix-name IRI pairs of the form NCName:xsd:anyURI. See
## http://www.reaction.ruleml.org/1.02/glossary/#gloss-@prefix
prefix-att.choice |= prefix.attrib.def
prefix.attrib.def = attribute prefix { prefix.datatype }?
prefix.datatype =
  xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }

## @vocab:  an IRI that defines the vocabulary mapping to use when a TERM is referenced in an attribute value.. See
## http://www.reaction.ruleml.org/1.02/glossary/#gloss-@vocab
vocab-att.choice |= vocab.attrib.def
vocab.attrib.def = attribute vocab { xsd:anyURI }?

## data type definition 
curieOrIRI.datatype |= curie.datatype | xsd:anyURI

## data type definition         
curieOrAbsIRI.datatype |= curie.datatype | absIRI.datatype

## data type definition         
termOrCurieOrIRI.datatype |= term.datatype | curie.datatype | xsd:anyURI

## data type definition         
termOrCurieOrAbsIRI.datatype = term.datatype | curie.datatype | absIRI.datatype
termOrCurieOrAbsIRIs.datatype = list { termOrCurieOrAbsIRI.datatype }
absIRI.datatype |= xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }

## data type definition         
curie.datatype |=
  xsd:string {
    minLength = "1"
    pattern = "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
  }
term.datatype |= xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }


