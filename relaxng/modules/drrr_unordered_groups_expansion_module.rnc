namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dc:title [ "Reaction RuleML Positional Independence" ]
dc:version [ "1.0" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:creator [ "Adrian Paschke" ]
dc:subject [ "RuleML, Reaction, positional independence" ]
dc:description [ "The expansion module for positional independence." ]
dc:language [ "en" ]
dcterms:rights [ "TBD" ]
dc:relation [ "http://reaction.ruleml.org" ]
# 
# ORDER MODE - UNORDERED GROUPS ENABLED
# REFACTORED TO ACCOMMODATE OIDS ON ALL NODES
#
include "http://deliberation.ruleml.org/1.02/relaxng/modules/unordered_groups_expansion_module.rnc" {
  start |= notAllowed
  # allowing the operator in Atom to be optional
  Atom.main |=
  operatorForAtoms-edge.choice? & argumentsForAtoms.sequence

  # allowing the operator in Expr to be optional
  Expr.main |=
  operatorForExpressions-edge.choice? &
  argumentsForExpressions.sequence


  # synchronizing the implication content model with the if-then part of the rule content model
  Implies.main |=
    (if_Rule-edge.choice & then_Rule-edge.choice)
    | (then_Rule-ss.content, if_Rule-edge.choice)
    | (then_Rule-edge.choice, if_Rule-ss.content)

# reversion to oids via Node.header (see below)
  Atom.header &= (Node.header? & degree-edge.choice?)?
  Expr.header &= Node.header?
  
}
# adding patterns for spatial-temporal individuals
argumentsForTime.sequence |= arg_time.choice* & restOfPositionalArguments-edge.choice? & slot-edge.choice* & restOfSlots-edge.choice?
argumentsForSpatial.sequence |= arg_spatial.choice* & restOfPositionalArguments-edge.choice? & slot-edge.choice* & restOfSlots-edge.choice?

# Managing the ordered and unordered forms of the extended Node header pattern in DR
# 1. to deal with the different distribution of oid, define a new pattern for element oid that
# is added to Node.header if the oid_all module is included. 
# This is a temporary fix until the oid distribution is harmonized in the next release.
# 2. to deal with the different definition of the meta element, define a new patterm for
# element meta that is added to Node.header if the meta_indexed module is included.
# This is a temporary fix until the meta distribution is harmonized in the next release.
# 
# Node_unordered.header
# content model: meta* & scope* & guard* & evaluation* & signature* & qualification* & quantification* & oid?
# In the modules for the corresponding features
# metadata.content, interface.content, instance.content
metadata_unordered.header &= metaKnowledge-edge.choice*
metadata_unordered.header &= scope.choice*
metadata_unordered.header &= guard.choice*
interface_unordered.header &= evaluation.choice*
interface_unordered.header &= signature.choice*
instance_unordered.header &= qualification.choice*
instance_unordered.header &= quantification.choice*
# special case
instance_unordered.header &= objectIdentifier-edge.choice?
#
Node_unordered.header &= metadata_unordered.header?
Node_unordered.header &= interface_unordered.header?
Node_unordered.header &= instance_unordered.header?
#
Node.header &= Node_unordered.header?
# *** Derivation Rule content model ***
DerivationRule.content |= Implies.main & (else_Rule-edge.choice?)
