namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dc:title [ "Reaction RuleML Positional Independence" ]
dc:version [ "1.0" ]
dc:creator [ "Tara Athan (taraathan AT gmail.com" ]
dc:creator [ "Adrian Paschke" ]
dc:subject [ "RuleML, Reaction, positional independence" ]
dc:description [ "The expansion module for positional independence." ]
dc:language [ "en" ]
dcterms:rights [ "TBD" ]
dc:relation [ "http://reaction.ruleml.org" ]
# 
# ORDER MODE - UNORDERED GROUPS ENABLED
# REFACTORED TO ACCOMMODATE OIDS ON ALL NODES
#
include "http://ruleml.org/1.0/relaxng/modules/unordered_groups_expansion_module.rnc" {
  start |= notAllowed
  Atom.header &= (Node.header? & degree-edge.choice?)?
  Expr.header &= Node.header?
  Implies.main |=
    (if_Rule-edge.choice & then_Rule-edge.choice)
    | (then_Rule-ss.content, if_Rule-edge.choice)
    | (then_Rule-edge.choice, if_Rule-ss.content)
}
if_Rule-ss.content |= notAllowed
then_Rule-ss.content |= notAllowed
# unordered
argumentsForTime.sequence |= arg_time.choice* & restOfPositionalArguments-edge.choice? & slot-edge.choice* & restOfSlots-edge.choice?
# unordered
argumentsForSpatial.sequence |= arg_spatial.choice* & restOfPositionalArguments-edge.choice? & slot-edge.choice* & restOfSlots-edge.choice?
# Node_unordered.header
# content model: meta* & scope* & guard* & evaluation* & signature* & qualification* & quantification* & oid?
# In the modules for the corresponding features
# metadata.content, interface.content, instance.content
metadata_unordered.header &= metaKnowledge-edge.choice*
metadata_unordered.header &= scope.choice*
metadata_unordered.header &= guard.choice*
interface_unordered.header &= evaluation.choice*
interface_unordered.header &= signature.choice*
instance_unordered.header &= qualification.choice*
instance_unordered.header &= quantification.choice*
# special case
instance_unordered.header &= objectIdentifier-edge.choice?
#
Node_unordered.header &= metadata_unordered.header?
Node_unordered.header &= interface_unordered.header?
Node_unordered.header &= instance_unordered.header?
#
Node.header &= Node_unordered.header?
#
arg-datt.choice |= empty
# *** Derivation Rule content model ***
DerivationRule.content |= Implies.main & (else_Rule-edge.choice?)
