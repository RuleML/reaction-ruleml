default namespace ns1 = "http://ruleml.org/spec"
namespace ns2 = "http://www.w3.org/2001/XMLSchema-instance"

start =
  RuleML
  | Consult
  | payload
  | Assert
  | Retract
  | Update
  | Query
  | Answer
  | oid
  | meta
  | scope
  | guard
  | evaluation
  | signature
  | qualification
  | quantification
  | Forall
  | Exists
  | declare
  | Implies
  | if
  | then
  | Entails
  | Equivalent
  | torso
  | Rulebase
  | And
  | Or
  | Atom
  | op
  | Rel
  | degree
  | slot
  | arg
  | Ind
  | Data
  | Var
  | Skolem
  | Reify
  | Expr
  | Fun
  | Plex
  | repo
  | resl
  | Equal
  | left
  | right
  | Rule
  | on
  | after
  | else
  | do
  | elseDo
  | Negation
  | formula
  | Naf
  | weak
  | Neg
  | strong
  | Quantifier
  | Profile
  | at
  | After
  | Before
  | Every
  | Any
  | Timer
  | During
  | Overlaps
  | Starts
  | Precedes
  | Succeeds
  | Meets
  | Finishes
  | fluent
  | Do
  | Happens
  | Initiates
  | Terminates
  | Holds
  | Succession
  | Choice
  | Flow
  | Loop
  | Sequence
  | Disjunction
  | Xor
  | Conjunction
  | Concurrent
  | Not
  | Aperiodic
  | Periodic
  | AtLeast
  | AtMost
  | Message
  | Agent
  | Protocol
  | protocol
  | directive
  | sender
  | receiver
  | Send
  | Receive
  | enclosed
  | Test
  | vvi
  | testbase
  | TestSuite
  | TestItem
  | expectedResult
RuleML =
  element RuleML {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (do_2
     | Assert
     | Retract
     | Update
     | Query
     | Answer
     | Test
     | Send
     | Receive
     | Action
     | Consult)*,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Consult =
  element Consult {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (payload | RuleML | Reify | Var | enclosed | Message)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
payload =
  element payload {
    (RuleML | Reify | Var),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Assert =
  element Assert {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (formula_2
     | Rulebase
     | Implies
     | Rule
     | Equivalent
     | Entails
     | Forall
     | Operation
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Retract =
  element Retract {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (formula_2
     | Rulebase
     | Implies
     | Rule
     | Equivalent
     | Entails
     | Forall
     | Operation
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Update =
  element Update {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((formula_2
      | Rulebase
      | Implies
      | Rule
      | Equivalent
      | Entails
      | Forall
      | Operation
      | Negation
      | Neg
      | Equal
      | Atom
      | Time
      | Spatial
      | Interval
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Finishes
      | Event
      | Action
      | Fluent
      | Situation
      | Holds
      | Initiates
      | Terminates
      | Happens),
     (formula_2
      | Rulebase
      | Implies
      | Rule
      | Equivalent
      | Entails
      | Forall
      | Operation
      | Negation
      | Neg
      | Equal
      | Atom
      | Time
      | Spatial
      | Interval
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Finishes
      | Event
      | Action
      | Fluent
      | Situation
      | Holds
      | Initiates
      | Terminates
      | Happens)?)?,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Query =
  element Query {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (formula_3
     | Rulebase
     | Entails
     | Operation_2
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Exists
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Answer =
  element Answer {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (formula_4
     | Rulebase
     | Entails
     | Operation_2
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Exists
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
oid =
  element oid {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
meta =
  element meta {
    (Rulebase
     | Implies
     | Rule
     | Equivalent
     | Entails
     | Forall
     | Operation
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
scope =
  element scope {
    (Rulebase
     | Entails
     | Operation_2
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Exists
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)?,
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
guard =
  element guard {
    (Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
evaluation =
  element evaluation {
    Profile,
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
signature =
  element signature {
    (Rulebase
     | Entails
     | Operation_2
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Exists
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
qualification =
  element qualification {
    (Rulebase
     | Implies
     | Rule
     | Equivalent
     | Entails
     | Forall
     | Operation
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
quantification =
  element quantification {
    (Forall_2 | Exists_2 | Quantifier),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Forall =
  element Forall {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (declare | Var)*,
    (formula_5
     | Implies
     | Rule
     | Equivalent
     | Forall
     | Operation_3
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Exists =
  element Exists {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (declare | Var)*,
    (formula_6
     | Exists
     | Operation_2
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
declare =
  element declare {
    Var,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Implies =
  element Implies {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((then, if)
     | (if, then)
     | ((Exists
         | Operation_3
         | And
         | Or
         | Negation
         | Naf
         | Neg
         | Equal
         | Atom
         | Time
         | Spatial
         | Interval
         | During
         | Overlaps
         | Starts
         | Precedes
         | Succeeds
         | Meets
         | Finishes
         | Event
         | Action
         | Fluent
         | Situation
         | Holds
         | Initiates
         | Terminates
         | Happens),
        (Forall
         | Operation_3
         | Negation
         | Neg
         | Equal
         | Atom
         | Time
         | Spatial
         | Interval
         | During
         | Overlaps
         | Starts
         | Precedes
         | Succeeds
         | Meets
         | Finishes
         | Event
         | Action
         | Fluent
         | Situation
         | Holds
         | Initiates
         | Terminates
         | Happens)))?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute material {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "yes"
      | "no"
    }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
if =
  element if {
    (Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
then =
  element then {
    (Forall
     | Operation_3
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Entails =
  element Entails {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((if_2
      | Rulebase
      | Implies
      | Rule
      | Equivalent
      | Forall
      | Operation
      | Negation
      | Neg
      | Equal
      | Atom
      | Time
      | Spatial
      | Interval
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Finishes
      | Event
      | Action
      | Fluent
      | Situation
      | Holds
      | Initiates
      | Terminates
      | Happens),
     (then_2
      | Rulebase
      | Implies
      | Rule
      | Equivalent
      | Forall
      | Operation
      | Negation
      | Neg
      | Equal
      | Atom
      | Time
      | Spatial
      | Interval
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Finishes
      | Event
      | Action
      | Fluent
      | Situation
      | Holds
      | Initiates
      | Terminates
      | Happens))?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute material {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "yes"
      | "no"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Equivalent =
  element Equivalent {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((torso
      | Forall
      | Operation_3
      | Negation
      | Neg
      | Equal
      | Atom
      | Time
      | Spatial
      | Interval
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Finishes
      | Event
      | Action
      | Fluent
      | Situation
      | Holds
      | Initiates
      | Terminates
      | Happens),
     (torso
      | Forall
      | Operation_3
      | Negation
      | Neg
      | Equal
      | Atom
      | Time
      | Spatial
      | Interval
      | During
      | Overlaps
      | Starts
      | Precedes
      | Succeeds
      | Meets
      | Finishes
      | Event
      | Action
      | Fluent
      | Situation
      | Holds
      | Initiates
      | Terminates
      | Happens))?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute material {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "yes"
      | "no"
    }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
torso =
  element torso {
    (Forall
     | Operation_3
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Rulebase =
  element Rulebase {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (formula_7
     | Implies
     | Rule
     | Equivalent
     | Forall
     | Operation
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)*,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute material {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "yes"
      | "no"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
And =
  element And {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (formula_8
     | Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)*,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Or =
  element Or {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (formula_8
     | Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)*,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Atom =
  element Atom {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (op | Rel)?,
    slot*,
    ((((Var
        | Skolem
        | Reify
        | Ind
        | Data
        | Expr
        | Plex
        | Time_2
        | Spatial_2
        | Interval_2
        | Event_2
        | Action_2
        | Situation_2
        | Fluent_2
        | After
        | Before
        | Every
        | Any
        | Timer
        | arg)+,
       repo?)
      | repo),
     slot*)?,
    resl?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
op =
  element op {
    Rel,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Rel =
  element Rel {
    text,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
degree =
  element degree {
    Data,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
slot =
  element slot {
    (Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
arg =
  element arg {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Ind =
  element Ind {
    text,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Data = element Data { xsd:string }
Var =
  element Var {
    text,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Skolem =
  element Skolem {
    text,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Reify =
  element Reify {
    _1?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Expr =
  element Expr {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (op_2 | Fun)?,
    slot*,
    ((((Var
        | Skolem
        | Reify
        | Ind
        | Data
        | Expr
        | Plex
        | Time_2
        | Spatial_2
        | Interval_2
        | Event_2
        | Action_2
        | Situation_2
        | Fluent_2
        | After
        | Before
        | Every
        | Any
        | Timer
        | arg)+,
       repo?)
      | repo),
     slot*)?,
    resl?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Fun =
  element Fun {
    text,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Plex =
  element Plex {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    slot*,
    ((((Var
        | Skolem
        | Reify
        | Ind
        | Data
        | Expr
        | Plex
        | Time_2
        | Spatial_2
        | Interval_2
        | Event_2
        | Action_2
        | Situation_2
        | Fluent_2
        | After
        | Before
        | Every
        | Any
        | Timer
        | arg)+,
       repo?)
      | repo),
     slot*)?,
    resl?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
repo =
  element repo {
    (Var | Plex_2),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
resl =
  element resl {
    (Var | Plex_3),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Equal =
  element Equal {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((left, right)
     | ((Var
         | Skolem
         | Reify
         | Ind
         | Data
         | Expr
         | Plex
         | Time_2
         | Spatial_2
         | Interval_2
         | Event_2
         | Action_2
         | Situation_2
         | Fluent_2
         | After
         | Before
         | Every
         | Any
         | Timer),
        (Var
         | Skolem
         | Reify
         | Ind
         | Data
         | Expr
         | Plex
         | Time_2
         | Spatial_2
         | Interval_2
         | Event_2
         | Action_2
         | Situation_2
         | Fluent_2
         | After
         | Before
         | Every
         | Any
         | Timer)))?,
    attribute oriented { "yes" | "no" }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
left =
  element left {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
right =
  element right {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Rule =
  element Rule {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (on | if | then | do | after | else | elseDo)*,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute material {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "yes"
      | "no"
    }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
on =
  element on {
    (Event
     | Action
     | Receive
     | Answer
     | Sequence
     | Disjunction
     | Xor
     | Conjunction
     | Concurrent
     | Not
     | Any_2
     | Aperiodic
     | Periodic
     | AtLeast
     | AtMost
     | Operation_4),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?,
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?
  }
after =
  element after {
    (Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
else =
  element else {
    (Forall
     | Operation_3
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
do =
  element do {
    (Assert
     | Retract
     | Update
     | Action
     | Query
     | Test
     | Send
     | Consult
     | Succession
     | Choice
     | Flow
     | Loop
     | Operation_5),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?,
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?
  }
elseDo =
  element elseDo {
    (Assert
     | Retract
     | Update
     | Action
     | Query
     | Test
     | Send
     | Consult
     | Succession
     | Choice
     | Flow
     | Loop
     | Operation_5),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?,
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?
  }
Negation =
  element Negation {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (formula
     | Operation_3
     | Equal
     | Negation
     | Neg
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
formula =
  element formula {
    (Operation_3
     | Equal
     | Negation
     | Neg
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Naf =
  element Naf {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (weak
     | Operation_3
     | Equal
     | Negation
     | Neg
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
weak =
  element weak {
    (Operation_3
     | Equal
     | Negation
     | Neg
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Neg =
  element Neg {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (strong
     | Operation_3
     | Equal
     | Negation
     | Neg
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
strong =
  element strong {
    (Operation_3
     | Equal
     | Negation
     | Neg
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Quantifier =
  element Quantifier {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (declare | Var)*,
    (formula_9
     | Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Profile =
  element Profile {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (formula_2
     | Rulebase
     | Implies
     | Rule
     | Equivalent
     | Entails
     | Forall
     | Operation
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens
     | content)*,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute material {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "yes"
      | "no"
    }?,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
at =
  element at {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
After =
  element After {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer),
     (arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer)?)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Before =
  element Before {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer),
     (arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer)?)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Every =
  element Every {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (arg_2
     | Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer
     | content_2)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Any =
  element Any {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (arg_2+
     | (Var
        | Skolem
        | Reify
        | Ind
        | Data
        | Expr
        | Plex
        | Time_2
        | Spatial_2
        | Interval_2
        | Event_2
        | Action_2
        | Situation_2
        | Fluent_2
        | After
        | Before
        | Every
        | Any
        | Timer)+
     | content_2+)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Timer =
  element Timer {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer),
     (arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer)?)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
During =
  element During {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer),
     (arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer))?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Overlaps =
  element Overlaps {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer),
     (arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer))?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Starts =
  element Starts {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer),
     (arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer))?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Precedes =
  element Precedes {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer),
     (arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer))?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Succeeds =
  element Succeeds {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer),
     (arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer))?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Meets =
  element Meets {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer),
     (arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer))?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Finishes =
  element Finishes {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer),
     (arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer))?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
fluent =
  element fluent {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer
     | Do),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Do =
  element Do {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (do, at?)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Happens =
  element Happens {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (on, at?)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Initiates =
  element Initiates {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (on, fluent, at?)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Terminates =
  element Terminates {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (on, fluent, at?)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Holds =
  element Holds {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (fluent, at?)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Succession =
  element Succession {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (do
     | Assert
     | Retract
     | Update
     | Action
     | Query
     | Test
     | Send
     | Consult
     | Succession
     | Choice
     | Flow
     | Loop
     | Operation_5)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Choice =
  element Choice {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (do
     | Assert
     | Retract
     | Update
     | Action
     | Query
     | Test
     | Send
     | Consult
     | Succession
     | Choice
     | Flow
     | Loop
     | Operation_5)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Flow =
  element Flow {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (do
     | Assert
     | Retract
     | Update
     | Action
     | Query
     | Test
     | Send
     | Consult
     | Succession
     | Choice
     | Flow
     | Loop
     | Operation_5)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Loop =
  element Loop {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (do
     | Assert
     | Retract
     | Update
     | Action
     | Query
     | Test
     | Send
     | Consult
     | Succession
     | Choice
     | Flow
     | Loop
     | Operation_5)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Sequence =
  element Sequence {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    on*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Disjunction =
  element Disjunction {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    on*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Xor =
  element Xor {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    on*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Conjunction =
  element Conjunction {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    on*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Concurrent =
  element Concurrent {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    on*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Not =
  element Not {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (on, at)?,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Aperiodic =
  element Aperiodic {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (on, at)?,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Periodic =
  element Periodic {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (on, at)?,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
AtLeast =
  element AtLeast {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    on*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
AtMost =
  element AtMost {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    on*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Message =
  element Message {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    cid?,
    protocol?,
    directive?,
    sender?,
    receiver?,
    (content_3 | payload)?,
    attribute mode { "inbound" | "outbound" | "bidirectional" }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Agent =
  element Agent {
    meta*,
    qualification*,
    oid?,
    content_3?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Protocol =
  element Protocol {
    meta*,
    qualification*,
    oid?,
    content_3?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
protocol =
  element protocol {
    (Protocol | Ind | Data | Var | Expr | Plex),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
directive =
  element directive {
    (Ind | Data | Var | Expr | Plex),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
sender =
  element sender {
    (Agent | Ind | Data | Var | Expr | Plex),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
receiver =
  element receiver {
    (Agent | Ind | Data | Var | Expr | Plex),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Send =
  element Send {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (enclosed | Message)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Receive =
  element Receive {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (enclosed | Message)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
enclosed =
  element enclosed {
    Message,
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Test =
  element Test {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (vvi | Entails | TestSuite | TestItem)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
vvi =
  element vvi {
    (Entails | TestSuite | TestItem),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
testbase =
  element testbase {
    (Consult | Assert),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
TestSuite =
  element TestSuite {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (testbase | Assert | Consult)*,
    (vvi | Entails | TestSuite | TestItem)*,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute material {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "yes"
      | "no"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
TestItem =
  element TestItem {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((do_2
      | Assert
      | Retract
      | Update
      | Query
      | Answer
      | Test
      | Send
      | Receive
      | Action
      | Consult),
     (expectedResult | Answer))?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute material {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "yes"
      | "no"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
expectedResult =
  element expectedResult {
    Answer,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
do_2 =
  element do {
    (Assert
     | Retract
     | Update
     | Query
     | Answer
     | Test
     | Send
     | Receive
     | Action
     | Consult),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Action =
  element Action {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((slot*,
      ((((Var
          | Skolem
          | Reify
          | Ind
          | Data
          | Expr
          | Plex
          | Time_2
          | Spatial_2
          | Interval_2
          | Event_2
          | Action_2
          | Situation_2
          | Fluent_2
          | After
          | Before
          | Every
          | Any
          | Timer
          | arg)+,
         repo?)
        | repo),
       slot*)?,
      resl?)
     | content_4),
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
formula_2 =
  element formula {
    (Rulebase
     | Implies
     | Rule
     | Equivalent
     | Entails
     | Forall
     | Operation
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Operation =
  element Operation {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (formula_7
     | Implies
     | Rule
     | Equivalent
     | Forall
     | Operation
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)*,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Time =
  element Time {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((slot*,
      ((((Var
          | Skolem
          | Reify
          | Ind
          | Data
          | Expr
          | Plex
          | Time_2
          | Spatial_2
          | Interval_2
          | Event_2
          | Action_2
          | Situation_2
          | Fluent_2
          | After
          | Before
          | Every
          | Any
          | Timer
          | arg_3)+,
         repo?)
        | repo),
       slot*)?,
      resl?)
     | content_5*),
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Spatial =
  element Spatial {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((slot*,
      ((((Var
          | Skolem
          | Reify
          | Ind
          | Data
          | Expr
          | Plex
          | Time_2
          | Spatial_2
          | Interval_2
          | Event_2
          | Action_2
          | Situation_2
          | Fluent_2
          | After
          | Before
          | Every
          | Any
          | Timer
          | arg_4)+,
         repo?)
        | repo),
       slot*)?,
      resl?)
     | content_6*),
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Interval =
  element Interval {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((arg_2
      | content_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer),
     (arg_2
      | content_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer)?)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Event =
  element Event {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((slot*,
      ((((Var
          | Skolem
          | Reify
          | Ind
          | Data
          | Expr
          | Plex
          | Time_2
          | Spatial_2
          | Interval_2
          | Event_2
          | Action_2
          | Situation_2
          | Fluent_2
          | After
          | Before
          | Every
          | Any
          | Timer
          | arg_5)+,
         repo?)
        | repo),
       slot*)?,
      resl?)
     | content_7),
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Fluent =
  element Fluent {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((slot*,
      ((((Var
          | Skolem
          | Reify
          | Ind
          | Data
          | Expr
          | Plex
          | Time_2
          | Spatial_2
          | Interval_2
          | Event_2
          | Action_2
          | Situation_2
          | Fluent_2
          | After
          | Before
          | Every
          | Any
          | Timer
          | arg_6)+,
         repo?)
        | repo),
       slot*)?,
      resl?)
     | content_8),
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Situation =
  element Situation {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((slot*,
      ((((Var
          | Skolem
          | Reify
          | Ind
          | Data
          | Expr
          | Plex
          | Time_2
          | Spatial_2
          | Interval_2
          | Event_2
          | Action_2
          | Situation_2
          | Fluent_2
          | After
          | Before
          | Every
          | Any
          | Timer
          | Do
          | arg_7)+,
         repo?)
        | repo),
       slot*)?,
      resl?)
     | content_9),
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
formula_3 =
  element formula {
    (Rulebase
     | Entails
     | Operation_2
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Exists
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Operation_2 =
  element Operation {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (formula_3
     | Rulebase
     | Entails
     | Operation_2
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Exists
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)*,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
And_2 =
  element And {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (formula_8
     | Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)*,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Or_2 =
  element Or {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (formula_8
     | Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)*,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
formula_4 =
  element formula {
    (Rulebase
     | Entails
     | Operation_2
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Exists
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Time_2 =
  element Time {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((slot*,
      ((((Var
          | Skolem
          | Reify
          | Ind
          | Data
          | Expr
          | Plex
          | Time_2
          | Spatial_2
          | Interval_2
          | Event_2
          | Action_2
          | Situation_2
          | Fluent_2
          | After
          | Before
          | Every
          | Any
          | Timer
          | arg_3)+,
         repo?)
        | repo),
       slot*)?,
      resl?)
     | content_5*),
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Spatial_2 =
  element Spatial {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((slot*,
      ((((Var
          | Skolem
          | Reify
          | Ind
          | Data
          | Expr
          | Plex
          | Time_2
          | Spatial_2
          | Interval_2
          | Event_2
          | Action_2
          | Situation_2
          | Fluent_2
          | After
          | Before
          | Every
          | Any
          | Timer
          | arg_4)+,
         repo?)
        | repo),
       slot*)?,
      resl?)
     | content_6*),
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Interval_2 =
  element Interval {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer),
     (arg_2
      | Var
      | Skolem
      | Reify
      | Ind
      | Data
      | Expr
      | Plex
      | Time_2
      | Spatial_2
      | Interval_2
      | Event_2
      | Action_2
      | Situation_2
      | Fluent_2
      | After
      | Before
      | Every
      | Any
      | Timer)?)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Event_2 =
  element Event {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((slot*,
      ((((Var
          | Skolem
          | Reify
          | Ind
          | Data
          | Expr
          | Plex
          | Time_2
          | Spatial_2
          | Interval_2
          | Event_2
          | Action_2
          | Situation_2
          | Fluent_2
          | After
          | Before
          | Every
          | Any
          | Timer
          | arg_5)+,
         repo?)
        | repo),
       slot*)?,
      resl?)
     | content_7),
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Action_2 =
  element Action {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((slot*,
      ((((Var
          | Skolem
          | Reify
          | Ind
          | Data
          | Expr
          | Plex
          | Time_2
          | Spatial_2
          | Interval_2
          | Event_2
          | Action_2
          | Situation_2
          | Fluent_2
          | After
          | Before
          | Every
          | Any
          | Timer
          | arg)+,
         repo?)
        | repo),
       slot*)?,
      resl?)
     | content_4),
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Situation_2 =
  element Situation {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    ((slot*,
      ((((Var
          | Skolem
          | Reify
          | Ind
          | Data
          | Expr
          | Plex
          | Time_2
          | Spatial_2
          | Interval_2
          | Event_2
          | Action_2
          | Situation_2
          | Fluent_2
          | After
          | Before
          | Every
          | Any
          | Timer
          | Do
          | arg_7)+,
         repo?)
        | repo),
       slot*)?,
      resl?)
     | content_9),
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Fluent_2 =
  element Fluent {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    ((slot*,
      ((((Var
          | Skolem
          | Reify
          | Ind
          | Data
          | Expr
          | Plex
          | Time_2
          | Spatial_2
          | Interval_2
          | Event_2
          | Action_2
          | Situation_2
          | Fluent_2
          | After
          | Before
          | Every
          | Any
          | Timer
          | arg_6)+,
         repo?)
        | repo),
       slot*)?,
      resl?)
     | content_8),
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Operation_3 =
  element Operation {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (formula_8
     | Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)*,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute direction {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "forward"
      | "backward"
      | "bidirectional"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute closure {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "universal"
      | "existential"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Forall_2 =
  element Forall {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (declare | Var)*,
    (formula_9
     | Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Exists_2 =
  element Exists {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    degree?,
    (declare | Var)*,
    (formula_9
     | Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens)?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
formula_5 =
  element formula {
    (Implies
     | Rule
     | Equivalent
     | Forall
     | Operation_3
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
formula_6 =
  element formula {
    (Exists
     | Operation_2
     | And_2
     | Or_2
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
if_2 =
  element if {
    (Rulebase
     | Implies
     | Rule
     | Equivalent
     | Forall
     | Operation
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
then_2 =
  element then {
    (Rulebase
     | Implies
     | Rule
     | Equivalent
     | Forall
     | Operation
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
formula_7 =
  element formula {
    (Implies
     | Rule
     | Equivalent
     | Forall
     | Operation
     | Negation
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
formula_8 =
  element formula {
    (Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
_1 =
  element ns1:* {
    attribute * { text }*,
    (text & _1*)
  }
op_2 =
  element op {
    Fun,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Plex_2 =
  element Plex {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (arg
     | Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer)*,
    repo?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Plex_3 =
  element Plex {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    slot*,
    resl?,
    attribute type {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute arity { xsd:nonNegativeInteger }?,
    attribute card { xsd:int }?,
    attribute maxCard { xsd:int }?,
    attribute minCard { xsd:nonNegativeInteger }?,
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute style {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "active"
      | "messaging"
      | "reasoning"
    }?,
    attribute scope {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
      | "local"
      | "global"
      | "private"
    }?,
    attribute mode {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "+"
      | "-"
      | "?"
    }?,
    attribute per {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "copy"
      | "value"
      | "effect"
      | "modal"
      | "open"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Any_2 =
  element Any {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    on*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Operation_4 =
  element Operation {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    on*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
Operation_5 =
  element Operation {
    meta*,
    scope*,
    guard*,
    evaluation*,
    signature*,
    qualification*,
    quantification*,
    oid?,
    (do
     | Assert
     | Retract
     | Update
     | Action
     | Query
     | Test
     | Send
     | Consult
     | Succession
     | Choice
     | Flow
     | Loop
     | Operation_5)*,
    attribute safety {
      xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
      | xsd:string {
          minLength = "1"
          pattern =
            "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
        }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      | "non-interrupting"
      | "interrupting"
      | "transactional"
    }?,
    attribute node {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute iri {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute vocab { xsd:anyURI }?,
    attribute meta {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute qualify {
      list {
        xsd:Name { pattern = "[\i-[:]][/\c-[:]]*" }
        | xsd:string {
            minLength = "1"
            pattern =
              "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
          }
        | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
      }
    }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
formula_9 =
  element formula {
    (Exists
     | Operation_3
     | And
     | Or
     | Negation
     | Naf
     | Neg
     | Equal
     | Atom
     | Time
     | Spatial
     | Interval
     | During
     | Overlaps
     | Starts
     | Precedes
     | Succeeds
     | Meets
     | Finishes
     | Event
     | Action
     | Fluent
     | Situation
     | Holds
     | Initiates
     | Terminates
     | Happens),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
content =
  element content {
    (_2* & text),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
arg_2 =
  element arg {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
content_2 =
  element content {
    (_2* & text),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
cid =
  element cid {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
content_3 =
  element content {
    (_2* & text),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
content_4 =
  element content {
    (_2* & text),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
arg_3 =
  element arg {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
content_5 =
  element content {
    (_2* & text),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
arg_4 =
  element arg {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
content_6 =
  element content {
    (_2* & text),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
arg_5 =
  element arg {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
content_7 =
  element content {
    (_2* & text),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
arg_6 =
  element arg {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
content_8 =
  element content {
    (_2* & text),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
arg_7 =
  element arg {
    (Var
     | Skolem
     | Reify
     | Ind
     | Data
     | Expr
     | Plex
     | Time_2
     | Spatial_2
     | Interval_2
     | Event_2
     | Action_2
     | Situation_2
     | Fluent_2
     | After
     | Before
     | Every
     | Any
     | Timer
     | Do),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
content_9 =
  element content {
    (_2* & text),
    attribute index { xsd:positiveInteger }?,
    attribute ns2:schemaLocation { text }?,
    attribute prefix {
      xsd:string { minLength = "1" pattern = "([\i-[:]][\c-[:]]*)?" }
    }?,
    attribute key {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute keyref {
      xsd:string {
        minLength = "1"
        pattern =
          "(([\i-[:]][\c-[:]]*)?:)?(/[^\s/][^\s]*|[^\s/][^\s]*|[^\s]?)"
      }
      | xsd:anyURI { pattern = "[\i-[:]][\c-[:]]+:.+" }
    }?,
    attribute xml:base { text }?,
    attribute xml:id { text }?
  }
_2 =
  element * {
    attribute * { text }*,
    (_2* & text)
  }
