<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
	targetNamespace="http://ruleml.org/spec" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation xml:lang="en">
			
			Action module part of Reaction RuleML. It defines the core 
			action constructs
			
			This is the XML Schema event module for Reaction RuleML.
			File: action_module.xsd
			Version: 1.02
			Last Modification: 2015-07-19
			
			This schema declares the following Reaction RuleML elements and attributes:
			
			* Action
			
		</xs:documentation>
		
		<xs:appinfo>
			<dc:title>Reaction RuleML Schema</dc:title>
			<dc:version>1.02</dc:version>
			<dc:creator>Adrian Paschke (paschke AT gmx.de)</dc:creator>
			<dc:subject>RuleML, custom-built for Reaction RuleML 1.02</dc:subject> 
			<dc:description>custom-built main module for Reaction RuleML</dc:description> 
			<dc:date>2015-03-29T23:11:17-0300</dc:date>
			<dc:language>en</dc:language>
			<dc:rights>'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.</dc:rights> 
			<dcterms:rights>http://ruleml.org/licensing/RSL1.0-RuleML</dcterms:rights> 
			<dc:relation>http://reaction.ruleml.org</dc:relation>
		</xs:appinfo>
	</xs:annotation>
	
	
	<!--
     *** arg ***
     
     Definition of the the arg role for Action


     see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-arg
     
-->
	<xs:attributeGroup name="arg_action.attlist">
		<xs:attributeGroup ref="edge-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="arg_action.content">
		<xs:choice>
			<xs:group ref="action_primitives.content"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="arg_action.type">
		<xs:group ref="arg_action.content"/>
		<xs:attributeGroup ref="arg_action.attlist"/>
	</xs:complexType>
	
	
	<!--
     *** content ***
     
     content model:  xs:any*
     
     @prefix and @vocab is used to define a prefix and a term mapping vocabulary for the XML content
     See CURIE to IRI and term to IRI translation
     
     see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-content
          
    -->
	<xs:attributeGroup name="action_anycontent.attlist">
		<xs:attributeGroup ref="edge-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="action_anycontent.content">
		<xs:choice>
			<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="action_anycontent.type">
		<xs:group ref="action_anycontent.content"/>
		<xs:attributeGroup ref="action_anycontent.attlist"/>
	</xs:complexType>
	
	<!--
	*** Action ***
	
	  Explicit generic Action. The action can be defined internally 
     	* with positional arguments <arg>, e.g., <arg><Ind>a1</Ind></arg> (atomic actions | complex actions)
      	* with unpositional slots <slot>, e.g., <slot><Ind>name</Ind><Ind>a1</Ind></slot><slot><Ind>processingDate</Ind><Time>....</Time></slot>
      	* as interpretation as event with <do>, e.g., <do><Atom>...</Atom></do>
      	* by the any content model (<content>xs:any Element</content>), which acts as an extension point to embed one of the many existing XML syntaxes for actions
      or externally, where the optional @iri attribute points to an external definition of the action.
      The optional @type attribute defines the type of the action,
      the optional @safety attribute indicates if this is an interrupting, non-interrupting, transactional action
      the optional @size attribute acts as a generic size counter for the number of actions to be done 
      optional @closure defines the default quantification
             

	  See: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Action	                
	-->
	<xs:attributeGroup name="Action-formula.attlist">
		<xs:attributeGroup ref="action-interface.attlist"/>
		<xs:attributeGroup ref="formula-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Action-formula.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>
			<xs:element ref="degree" minOccurs="0"/>
			<xs:choice minOccurs="0">
				<xs:sequence>
					<xs:element ref="slot" minOccurs="0" maxOccurs="unbounded"/>
					<xs:choice minOccurs="0">
						<xs:sequence>
						<xs:choice>
							<xs:sequence>
								<xs:choice maxOccurs="unbounded">
									<xs:element name="arg" type="arg_action.type"/>
									<xs:group ref="arg_action.content"/>
								</xs:choice>
								<xs:element ref="repo" minOccurs="0"/>
							</xs:sequence>
							<xs:element ref="repo"/>
						</xs:choice>
						<xs:element ref="slot"  minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:choice>	
					<xs:element ref="resl" minOccurs="0"/>
				</xs:sequence>            								
				<xs:element name="content" type="action_anycontent.type"/>				
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Action-formula.type">
		<xs:group ref="Action-formula.content"/>
		<xs:attributeGroup ref="Action-formula.attlist"/>
	</xs:complexType>


	<!-- action term -->
	
	<xs:attributeGroup name="Action-term.attlist">
		<xs:attributeGroup ref="action-interface.attlist"/>
		<xs:attributeGroup ref="term-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Action-term.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>	
			<xs:choice minOccurs="0">
				<xs:sequence>
					<xs:element ref="slot" minOccurs="0" maxOccurs="unbounded"/>
					<xs:choice minOccurs="0">
						<xs:sequence>
							<xs:choice>
								<xs:sequence>
									<xs:choice maxOccurs="unbounded">
										<xs:element name="arg" type="arg_action.type"/>
										<xs:group ref="arg_action.content"/>
									</xs:choice>
									<xs:element ref="repo" minOccurs="0"/>
								</xs:sequence>
								<xs:element ref="repo"/>
							</xs:choice>
							<xs:element ref="slot"  minOccurs="0" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:choice>	
					<xs:element ref="resl" minOccurs="0"/>
				</xs:sequence>            								
				<xs:element name="content" type="action_anycontent.type"/>				
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Action-term.type">
		<xs:group ref="Action-term.content"/>
		<xs:attributeGroup ref="Action-term.attlist"/>
	</xs:complexType>
	
</xs:schema>
