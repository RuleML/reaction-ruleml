<?xml version="1.0"?>

<xs:schema targetNamespace="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
   xmlns="http://ruleml.org/spec" elementFormDefault="qualified">
    
  <xs:annotation>
    <xs:documentation xml:lang="en"> This is the XML Schema module for description-related RuleML
      elements. File: desc_module.xsd Version: 1.02 Last Modification: 2015-05-17 [Adrian Paschke]
      This module declares the following RuleML elements:   
      
    
      * meta            descriptive metadata 
      * scope           scope  (e.g. for scoped reasoning)	
      * guard			      guard (e.g. for guard constraints in scoped reasoning)
      * evaluation      semantic profile 
      * signature       interface signature, pattern definition,
      * qualification   qualification, e.g. priorities, validity, strategy
      * quantification  quantification
      * oid
      
      See
      http://www.ruleml.org/modularization for details about this modularization approach.
    </xs:documentation>
    
    <xs:appinfo>
      <dc:title>RuleML Schema</dc:title>
      <dc:version>1.02</dc:version>
      <dc:creator>Adrian Paschke (paschke AT gmx.de)</dc:creator>
      <dc:creator>Tara Athan (taraathan AT gmail.com)</dc:creator>
      <dc:subject>RuleML, custom-built for Reaction RuleML 1.02</dc:subject> 
      <dc:description>custom-built main module for Reaction RuleML</dc:description> 
      <dc:date>2015-05-17T23:11:17-0300</dc:date>
      <dc:language>en</dc:language>
      <dc:rights>'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.</dc:rights> <dcterms:rights>http://ruleml.org/licensing/RSL1.0-RuleML</dcterms:rights> 
       <dc:relation>http://reaction.ruleml.org</dc:relation>
    </xs:appinfo> 
  </xs:annotation>

  <!--
  *** oid ***
  An optional object identifier for an atomic formula, expression or the unifed terms
  of the SWSL branch, as needed for PSOA semantics.
  Note that oids are not required to be unique within a rulebase.
  
  See http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-oid
  -->
  <xs:attributeGroup name="oid.attlist">
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:group name="oid.content">
    <xs:choice>
      <xs:element ref="Var"/>
      <xs:element ref="Skolem"/>
      <xs:element ref="Reify"/>
      <xs:group ref="extended-signature-function-sorts.content"/>
    </xs:choice>
  </xs:group>

  <xs:complexType name="oid.type">
    <xs:group ref="oid.content"/>
    <xs:attributeGroup ref="oid.attlist"/>
  </xs:complexType>

  <xs:element name="oid" type="oid.type"/>
  
  <!-- 
     *** meta ***     
     
    An optional container for meta-knowledge about a Node.
    
    See http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-meta
-->
  
  <xs:attributeGroup name="meta.attlist">
    <xs:attributeGroup ref="edge-element.attlist"/>
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:group name="meta.content">
    <xs:choice>
      <xs:group ref="formula-assert.content"/>			
    </xs:choice>
  </xs:group>
  <xs:complexType name="meta.type">
    <xs:group ref="meta.content"/>
    <xs:attributeGroup ref="meta.attlist"/>
  </xs:complexType>
  <xs:element name="meta" type="meta.type"/>
  
  
  <!--
     *** scope ***
     
     metadata-based scope definition defined over the metadata annotations and the qualifications annotations.
     
     see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-scope
     
     Note: scope reasoning can use the metadata scopes to define a constructive view on the knowledge in the KB.    
     
-->
  <xs:attributeGroup name="scope.attlist">
    <xs:attributeGroup ref="edge-element.attlist"/>
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:group name="scope.content">
    <xs:choice>
      <xs:group ref="formula-query.content" minOccurs="0"/>	
    </xs:choice>
  </xs:group>
  <xs:complexType name="scope.type">
    <xs:group ref="scope.content"/>
    <xs:attributeGroup ref="scope.attlist"/>
  </xs:complexType>
  <xs:element name="scope" type="scope.type"/>
  
  <!--
     *** guard ***     
     
	guard constraints 
	
	see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-guard
 -->
  <xs:attributeGroup name="guard.attlist">
    <xs:attributeGroup ref="edge-element.attlist"/>
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:group name="guard.content">
    <xs:choice>
      <xs:group ref="if.content"/>		
    </xs:choice>
  </xs:group>
  <xs:complexType name="guard.type">
    <xs:group ref="guard.content"/>
    <xs:attributeGroup ref="guard.attlist"/>
  </xs:complexType>
  <xs:element name="guard" type="guard.type"/>
  
  <!--
     *** evaluation ***
     
     The intended evaluation semantics, e.g. model theoretic semantic, proof-semantics, execution semantic such as selection and consumption policies etc.
     
     	see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-evaluation

  -->
  <xs:attributeGroup name="evaluation.attlist">
    <xs:attributeGroup ref="edge-element.attlist"/>
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:group name="evaluation.content">
    <xs:sequence>
      <xs:element ref="Profile"/>
    </xs:sequence>
  </xs:group>
  <xs:complexType name="evaluation.type">
    <xs:group ref="evaluation.content"/>
    <xs:attributeGroup ref="evaluation.attlist"/>
  </xs:complexType>
  <xs:element name="evaluation" type="evaluation.type"/>
  
  <!--
     *** signature ***
     
     The signature defines the signature of knowledge (formula and terms) with optional input / output mode declarations. The signature declaration can act as public interface and
	can be published together with the intended evaluation semantics. 
	
	see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-signature
  -->
  <xs:attributeGroup name="signature.attlist">
    <xs:attributeGroup ref="edge-element.attlist"/>
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:group name="signature.content">
    <xs:choice>
      <xs:group ref="formula-query.content"/>
    </xs:choice>
  </xs:group>
  <xs:complexType name="signature.type">
    <xs:group ref="signature.content"/>
    <xs:attributeGroup ref="signature.attlist"/>
  </xs:complexType>
  <xs:element name="signature" type="signature.type"/>
  
  <!--
     *** qualification ***
     
    Definition of the qualification (qualifying metadata), e.g. validity time, priorities, etc.
    
    see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-qualification
-->
  <xs:attributeGroup name="qualification.attlist">
    <xs:attributeGroup ref="edge-element.attlist"/>
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:group name="qualification.content">
    <xs:choice>
      <xs:group ref="formula-assert.content"/>
    </xs:choice>
  </xs:group>
  <xs:complexType name="qualification.type">
    <xs:group ref="qualification.content"/>
    <xs:attributeGroup ref="qualification.attlist"/>
  </xs:complexType>
  <xs:element name="qualification" type="qualification.type"/>
  
  <!--
     *** quantification ***
     
     Definition of the quantifier. 
     
     see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-quantification
        
-->
  <xs:attributeGroup name="quantification.attlist">
    <xs:attributeGroup ref="edge-element.attlist"/>
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:group name="quantification.content">
    <xs:choice>
      <xs:group ref="meta-quantifier.content"/>
    </xs:choice>
  </xs:group>
  <xs:complexType name="quantification.type">
    <xs:group ref="quantification.content"/>
    <xs:attributeGroup ref="quantification.attlist"/>
  </xs:complexType>
  <xs:element name="quantification" type="quantification.type"/>
  

</xs:schema>
