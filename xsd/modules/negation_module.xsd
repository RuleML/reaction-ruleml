<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
	targetNamespace="http://ruleml.org/spec" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation xml:lang="en">
        Negation module part of Reaction RuleML.
		This defines the negation elements for Reaction RuleML.
		File: negation_module.xsd
		Version: 1.02
		Last Modification: 2015-03-22
		
		* Negation		generic polymorphig negation
		* Naf           negation as failure (inflationary negation in production rules), weak negation
		* Neg           classical negation, strong negation
		* weak		
		* strong
		* formula				

		</xs:documentation>
		
		<xs:appinfo>
			<dc:title>Reaction RuleML Schema</dc:title>
			<dc:version>1.02</dc:version>
			<dc:creator>Adrian Paschke (paschke AT gmx.de)</dc:creator>
            <dc:creator>Tara Athan (taraathan AT gmail.com)</dc:creator>
			<dc:subject>RuleML, custom-built for Reaction RuleML 1.02</dc:subject> 
			<dc:description>custom-built main module for Reaction RuleML</dc:description> 
			<dc:date>2015-07-14T17:04:00+0200</dc:date>
			<dc:language>en</dc:language>
			<dc:rights>'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.</dc:rights> <dcterms:rights>http://ruleml.org/licensing/RSL1.0-RuleML</dcterms:rights> 
			 <dc:relation>http://reaction.ruleml.org</dc:relation>
		</xs:appinfo>
	</xs:annotation>


	<!--
		*** Negation ***
		A generic polymorphic negation
		
		see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Negation
		
		It can be specialized by using
		the @type attribute to specify the type of negation and/or 
 		the @iri attribute to point to an external definition of the negation
 		@key, @keyref, @node

		content model: 
		DR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, degree?, (formula | Operation | Atom | Equal | Negation |  Neg | Time | Interval | Spatial ) )
		KR Reaction RuleML ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, degree?, (formula | Operation | Atom | Equal | Negation | | Neg | Time | Interval | Spatial | Event | Action | Situation | Holds | Happens | Initates | Terminates ) )
        PR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, degree?, (formula | Operation | Atom | Equal | Negation ) )
		ECA Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, degree?, (formula | Operation | Atom | Equal | Negation |  Neg | Time | Interval | Spatial | Event | Action) )
	
	attributes: @type?, @mode?, @arity?, @card?, @minCard?, @maxCard?, @weight?, @style?, @direction?, @scope?, @closure?, @per?, @meta?, @qualify?, @node?, @iri?, @vocab?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base? 
		-->
	<xs:attributeGroup name="Negation.attlist">
		<xs:attributeGroup ref="formula-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Negation.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>
			<xs:element ref="degree" minOccurs="0"/>
			<xs:choice>
				<xs:element name="formula" type="formula-negation.type"/>
				<xs:group ref="formula-negation.content"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Negation.type">
		<xs:group ref="Negation.content"/>
		<xs:attributeGroup ref="Negation.attlist"/>
	</xs:complexType>
	<xs:element name="Negation" type="Negation.type"/>
	<xs:attributeGroup name="formula-negation.attlist">
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="formula-negation.content">
		<xs:choice>
			<xs:element name="Operation" type="ConnectiveOperation.type"/>
			<xs:element ref="Equal"/>
			<xs:element ref="Negation"/>
			<xs:element ref="Neg"/>
			<xs:group ref="extended-signature-predicate-sorts.content"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="formula-negation.type">
		<xs:group ref="formula-negation.content"/>
		<xs:attributeGroup ref="formula-negation.attlist"/>
	</xs:complexType>
	<xs:element name="formula" type="formula-negation.type"/>
	
	<!--
		*** Naf ***
		A "by default" negation of a logical atom (i.e. "weak" negation or
		negation-as-failure).
		
		See http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Naf
		
		content model: 
		DR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, degree?, (weak | Operation | Atom | Equal | Negation | Neg | Time | Interval | Spatial ) )
		KR Reaction RuleML ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, degree?, (weak | Operation | Atom | Equal | Negation | Neg | Time | Interval | Spatial | Event | Action | Situation | Holds | Happens | Initates | Terminates ) )
   		PR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, degree?, (weak | Operation | Atom | Equal | Negation ) )
 		ECA Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, degree?, (weak | Operation | Atom | Equal | Negation | Neg | Time | Interval | Spatial | Event | Action ) )  		
	
		attributes: @type?, @mode?, @arity?, @card?, @minCard?, @maxCard?, @weight?, @style?, @direction?, @scope?, @closure?, @per?, @meta?, @qualify?, @node?, @iri?, @vocab?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base? 
	-->
	<xs:attributeGroup name="Naf.attlist">
		<xs:attributeGroup ref="Negation.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Naf.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>
			<xs:element ref="degree" minOccurs="0"/>
			<xs:choice>
				<xs:element ref="weak"/>
				<xs:group ref="weak.content"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Naf.type">
		<xs:group ref="Naf.content"/>
		<xs:attributeGroup ref="Naf.attlist"/>
	</xs:complexType>
	<xs:element name="Naf" type="Naf.type"/>
	
	<!--
		*** weak ***
		A role used for negation as failure.
	
		See http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-weak
		
		content model:
		DR Reaction RuleML: ( Operation | Atom | Equal | Negation |  Neg | Time | Interval | Spatial )
		KR Reaction RuleML ( Operation | Atom | Equal | Negation | | Neg | Time | Interval | Spatial | Event | Action | Situation | Holds | Happens | Initates | Terminates )
		PR Reaction RuleML: ( Operation | Atom | Equal | Negation )
		ECA Reaction RuleML: ( Operation | Atom | Equal | Negation |  Neg | Time | Interval | Spatial | Event | Action )
		
		attributes: @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
	-->
	<xs:attributeGroup name="weak.attlist">
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="weak.content">
		<xs:choice>
			<xs:group ref="formula-negation.content"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="weak.type">
		<xs:group ref="weak.content"/>
		<xs:attributeGroup ref="weak.attlist"/>
	</xs:complexType>
	<xs:element name="weak" type="weak.type"/>

	<!--
		*** Neg ***
		A classical negation of a logical atom (i.e. classical or "strong" negation).
		
		See http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Neg
		
		content model:
		DR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, degree?, (strong | Operation | Atom | Equal | Negation | Neg | Time | Interval | Spatial ) )
		KR Reaction RuleML ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, degree?, (strong | Operation | Atom | Equal | Negation | Neg | Time | Interval | Spatial | Event | Action | Situation | Holds | Happens | Initates | Terminates ) )
		PR Reaction RuleML: strong negation not supported by PR Reaction RuleML
		ECA Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, degree?, (strong | Operation | Atom | Equal | Negation | Neg | Time | Interval | Spatial | Event | Action ) )

	attributes: @type?, @mode?, @arity?, @card?, @minCard?, @maxCard?, @weight?, @style?, @direction?, @scope?, @closure?, @per?, @meta?, @qualify?, @node?, @iri?, @vocab?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base? 
	-->
	<xs:attributeGroup name="Neg.attlist">
		<xs:attributeGroup ref="Negation.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Neg.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>
			<xs:element ref="degree" minOccurs="0"/>
			<xs:choice>
				<xs:element ref="strong"/>
				<xs:group ref="strong.content"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Neg.type">
		<xs:group ref="Neg.content"/>
		<xs:attributeGroup ref="Neg.attlist"/>
	</xs:complexType>
	<xs:element name="Neg" type="Neg.type"/>
	
	<!--
		*** strong ***
		A role used for classical negation.
		
		See http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-strong
		
		content model: 
		DR Reaction RuleML: ( Operation | Atom | Equal | Negation | Neg | Time | Interval | Spatial )
		KR Reaction RuleML (  Operation | Atom | Equal | Negation | | Neg | Time | Interval | Spatial | Event | Action | Situation | Holds | Happens | Initates | Terminates )	
		PR Reaction RuleML: strong negation not supported by PR Reaction RuleML 
		ECA Reaction RuleML: ( Operation | Atom | Equal | Negation | Neg | Time | Interval | Spatial | Event | Action )	

		attributes: @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
	-->
	<xs:attributeGroup name="strong.attlist">
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="strong.content">
		<xs:choice>
			<xs:group ref="formula-negation.content"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="strong.type">
		<xs:group ref="strong.content"/>
		<xs:attributeGroup ref="strong.attlist"/>
	</xs:complexType>
	<xs:element name="strong" type="strong.type"/>

</xs:schema>
