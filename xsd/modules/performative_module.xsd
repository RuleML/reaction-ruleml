<?xml version="1.0"?>

<xs:schema targetNamespace="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
  xmlns="http://ruleml.org/spec" elementFormDefault="qualified">

  <!-- note that elementFormDefault is qualified because of local declarations -->

  <xs:annotation>
    <xs:documentation xml:lang="en"> This is the XML Schema module for RuleML performatives. File:
      performative_module.xsd Version: 1.0 Last Modification: 2011-09-26 This module declares the
      following RuleML elements: * RuleML * Assert * Retract * Query * act * formula See
      http://www.ruleml.org/modularization for details about this modularization approach.
    </xs:documentation>
    <xs:documentation source="http://ruleml.org/licensing/ruleml_eula.html"/>
    <xs:appinfo>
      <dc:title>RuleML Schema</dc:title>
      <dc:version>1.0</dc:version>
      <dc:creator>Adrian Paschke (paschke AT gmx.de)</dc:creator>
      <dc:creator>Tara Athan (taraathan AT gmail.com)</dc:creator>
      <dc:subject>RuleML, custom-built for Reaction RuleML 1.0</dc:subject> 
      <dc:description>custom-built main module for Reaction RuleML</dc:description> 
      <dc:date>2011-09-26T23:11:17-0300</dc:date>
      <dc:language>en</dc:language>
      <dcterms:rights>LGPL-3.0</dcterms:rights> 
      <dc:relation>http://wiki.ruleml.org/index.php/Relax_NG</dc:relation>
    </xs:appinfo>  
  </xs:annotation>

  <!--
		*** RuleML ***
		The n-ary top-level of a RuleML document.
		
		See http://www.ruleml.org/1.0/glossary/#gloss-RuleML
		
	 the DR schema redefines the RuleML element
	 and adds meta, evaluation, signature, qualification, quantification, and scope so that the content model is:
	 
	DR/KR Reaction RuleML ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (act | Assert | Retract | Query)* )
	PR Reaction RuleML ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (act | Action | Assert | Retract | Update | Query)* )
	ECA Reaction RuleML ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (act | Action | Assert | Retract | Update | Query)* )
	CEP Reaction RuleML ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (act|Assert|Retract|Update|Query|Answer|Send|Receive|Consult|Test|Action)* )
			
 	 Note: key and keyref object identifier are defined to be unique under the RuleML document root
 	 
 	 @vocab: an IRI that defines the mapping to use when a type term (e.g. a frame signature type) is referenced in an attribute value
 	 @prefix: a white space separated list of prefix-name IRI pairs of the form NCName ':' ' '+ xsd:anyURI
				
	-->
  <xs:attributeGroup name="RuleML.attlist">
    <xs:attributeGroup ref="vocab.attrib"/>
    <xs:attributeGroup ref="prefix.attrib"/>
    <xs:attributeGroup ref="node.attrib"/>
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:group name="RuleML.content">
    <xs:sequence>
      <xs:group ref="meta-roles.content"/>     
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="act"/>
        <xs:group ref="act.content"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:complexType name="RuleML.type">
    <xs:group ref="RuleML.content"/>
    <xs:attributeGroup ref="RuleML.attlist"/>
  </xs:complexType>
  
  <xs:element name="RuleML" type="RuleML.type">
    <!-- key object identifiers and key object references defined on the top level -->
    <xs:unique name="keyOID">
      <xs:selector xpath=".//*"/>
      <xs:field xpath="@key"/>
    </xs:unique>
    <xs:keyref name="keyOIDref" refer="keyOID">
      <xs:selector xpath=".//*"/>
      <xs:field xpath="@keyref"/>
    </xs:keyref> 
  </xs:element>
  
  <!--
    *** act ***
    The act role of the root element (<RuleML>).
    
    See http://www.ruleml.org/1.0/glossary/#gloss-act
    
    content model  
    DR/KR Reaction RuleML (Assert|Retract|Query)
    PR Reaction RuleML (Assert|Retract|Query|Update|Action)
    ECA Reaction RuleML (Assert|Retract|Query|Update|Action)
    CEP Reaction RuleML (Assert|Retract|Update|Query|Answer|Send|Receive|Consult|Test|Action)
  -->
  <xs:group name="act.content">
    <xs:choice>
      <xs:group ref="performative_primitives.content"/>
    </xs:choice>
  </xs:group>
  <xs:attributeGroup name="act.attlist">
    <xs:attributeGroup ref="index.attrib"/>
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:complexType name="act.type">
    <xs:group ref="act.content"/>
    <xs:attributeGroup ref="act.attlist"/>
  </xs:complexType>
  <xs:element name="act" type="act.type"/>
  <!--
		*** Assert ***
		A KQML-like performative acting as a wrapper specifying that its content is
		asserted, making an 'implicit <Rulebase>' assumption.

		See http://www.ruleml.org/1.0/glossary/#gloss-Assert 

		content model:
		DR Reaction RuleMl: (meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?,  (formula | Operator | Rulebase | Atom | Rule | Equivalent | Entails | Forall |  Equal | Negation | Neg | Time | Spatial | Interval  )*)
    KR Reaction RuleMl: (meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?,  (formula | Operator | Rulebase | Atom | Rule | Equivalent | Entails | Forall |  Equal | Negation | Neg | Time | Spatial | Interval | Event | Action | Situation | Holds | Initiates | Terminates | Happens )*)
    PR Reaction RuleML: (meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?,  (formula | Operator | Rulebase | Atom | Rule | Equivalent | Entails | Equal )*) 
    ECA Reaction RuleMl: (meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?,  (formula | Operator | Rulebase | Atom | Rule | Equivalent | Entails | Equal | Negation | Neg | Time | Spatial | Interval | Event | Action  )*)
	-->
  <xs:attributeGroup name="Assert.attlist">
    <xs:attributeGroup ref="mapDirection.attrib"/>
    <xs:attributeGroup ref="mapClosure.attrib"/>
    <xs:attributeGroup ref="mapMaterial.attrib"/>
    <xs:attributeGroup ref="node.attrib"/>
    <xs:attributeGroup ref="xml.attlist"/>
    <xs:attributeGroup ref="safety.attrib"/>
    <xs:attributeGroup ref="size.attrib"/>
  </xs:attributeGroup>
  <xs:group name="Assert.content">
    <xs:sequence>
      <xs:group ref="meta-roles.content"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="formula" type="formula-assert.type"/>
        <xs:group ref="formula-assert.content"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:complexType name="Assert.type">
    <xs:group ref="Assert.content"/>
    <xs:attributeGroup ref="Assert.attlist"/>
  </xs:complexType>
  <xs:element name="Assert" type="Assert.type"/>

  <!--
		*** Retract ***
		A performative similar to KQML's 'untell' that acts as a wrapper specifying that its
		content is to be deleted, making an 'implicit <Rulebase>' assumption.

		See http://www.ruleml.org/1.0/glossary/#gloss-Retract

		content model:
		DR Reaction RuleMl: (meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?,  (formula | Operator | Rulebase | Atom | Rule | Equivalent | Entails | Forall |  Equal | Negation | Neg | Time | Spatial | Interval  )*)
    KR Reaction RuleMl: (meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?,  (formula | Operator | Rulebase | Atom | Rule | Equivalent | Entails | Forall |  Equal | Negation | Neg | Time | Spatial | Interval | Event | Action | Situation | Holds | Initiates | Terminates | Happens )*)
    PR Reaction RuleML: (meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?,  (formula | Operator | Rulebase | Atom | Rule | Equivalent | Entails | Equal )*) 
 		ECA Reaction RuleMl: (meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?,  (formula | Operator | Rulebase | Atom | Rule | Equivalent | Entails |  Equal | Negation | Neg | Time | Spatial | Interval | Event | Action  )*)   
	-->
  <xs:attributeGroup name="Retract.attlist">
    <xs:attributeGroup ref="mapDirection.attrib"/>
    <xs:attributeGroup ref="mapClosure.attrib"/>
    <xs:attributeGroup ref="mapMaterial.attrib"/>
    <xs:attributeGroup ref="node.attrib"/>
    <xs:attributeGroup ref="xml.attlist"/>
    <xs:attributeGroup ref="safety.attrib"/>
    <xs:attributeGroup ref="size.attrib"/>
  </xs:attributeGroup>
  <xs:group name="Retract.content">
    <xs:sequence>
      <xs:group ref="meta-roles.content"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="formula" type="formula-assert.type"/>
        <xs:group ref="formula-assert.content"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:complexType name="Retract.type">
    <xs:group ref="Retract.content"/>
    <xs:attributeGroup ref="Retract.attlist"/>
  </xs:complexType>
  <xs:element name="Retract" type="Retract.type"/>

  <!--
		*** Query ***
		A KQML-like performative acting as a wrapper specifying that its content is
		queried, making an 'implicit <Rulebase>' assumption.
		
		See http://www.ruleml.org/1.0/glossary/#gloss-Query 

		content model:
		DR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?,  (formula | Operator | Atom | Rulebase | And | Or | Entails | Exists |  Equal | Negation | Neg | Naf | Time | Spatial | Interval )* )
		KR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?,  (formula | Operator | Atom | Rulebase | And | Or | Entails | Exists |  Equal | Negation | Neg | Naf | Time | Spatial | Interval | Event | Action | Situation | Holds | Initiates | Terminates | Happens )* )
		PR Reaction RuleML:( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?,  (formula | Operator | Rulebase | Atom | Entails | And | Or | Negation | Naf | Equal | Action )* )
		ECA Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?,  (formula | Operator | Atom | Rulebase | And | Or | Entails |  Equal | Negation | Neg | Naf | Time | Spatial | Interval | Event | Action )* )		
	-->
  <xs:attributeGroup name="Query.attlist">
    <xs:attributeGroup ref="closure.attrib"/>
    <xs:attributeGroup ref="node.attrib"/>
    <xs:attributeGroup ref="xml.attlist"/>
    <xs:attributeGroup ref="safety.attrib"/>
    <xs:attributeGroup ref="size.attrib"/>
  </xs:attributeGroup>
  <xs:group name="Query.content">
    <xs:sequence>
      <xs:group ref="meta-roles.content"/> 
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="formula" type="formula-query.type"/>
        <xs:group ref="formula-query.content"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:complexType name="Query.type">
    <xs:group ref="Query.content"/>
    <xs:attributeGroup ref="Query.attlist"/>
  </xs:complexType>
  <xs:element name="Query" type="Query.type"/>

  <!--
		*** formula ***
		The formula role of a performative (<Assert>, <Retract> or <Query>).

		See http://www.ruleml.org/1.0/glossary/#gloss-formula

		content model (below Assert formula): 
		DR Reaction RuleML (Operator | Rulebase | Atom | Implies | Rule | Equivalent | Entails | Equal | Negation | Neg | Forall |  Time | Spatial | Interval )
		KR Reaction RuleML (Operator | Rulebase | Atom | Implies | Rule | Equivalent | Entails | Equal | Negation | Neg | Forall |  Time | Spatial | Interval  | Event | Action | Situation | Holds | Initiates | Terminates | Happens )
		PR Reaction RuleML (Operator | Rulebase | Atom | Rule | Equivalent | Entails | Equal )
		ECA Reaction RuleML (Operator | Rulebase | Atom | Implies | Rule | Equivalent | Entails | Equal | Negation | Neg |  Time | Spatial | Interval | Event | Action )
		
		content model (below Query): 
		DR Reaction RuleML (Operator | Rulebase | Atom | Entails | And | Or | Equal | Negation | Naf | Neg | Exists |  Time | Spatial | Interval )
		KR Reaction RuleML (Operator | Rulebase | Atom | Entails | And | Or | Equal | Negation | Naf | Neg | Exists |  Time | Spatial | Interval | Event | Action | Situation | Holds | Initiates | Terminates | Happens )
    PR Reaction RuleML (Operator | Rulebase | Atom | Entails | And | Or | Negation | Naf | Equal | Action )
		ECA Reaction RuleML (Operator | Rulebase | Atom | Entails | And | Or | Equal | Negation | Naf | Neg | Time | Spatial | Interval | Event | Action )    

		Other (context-sensitive) versions of <formula> are in the
		connective and quantifier modules.
	-->
  <!-- the (empty) attribute list is declared in the connective module -->
  <xs:group name="formula-assert.content">
    <xs:choice>
      <xs:element ref="Rulebase"/>
      <xs:element ref="Implies"/>
      <xs:element ref="Rule"/>	
      <xs:element ref="Equivalent"/>
      <xs:element ref="Entails"/>
      <xs:group ref="outer-quantifier.content"/>
      <xs:group ref="outer-connective.content"/>
      <xs:group ref="extended-signature-predicate-sorts.content"/>
    </xs:choice>
  </xs:group>
  <xs:group name="formula-query.content">
    <xs:choice>
      <xs:element ref="Rulebase"/>
      <xs:element ref="Entails"/>
      <xs:group ref="query-connective.content"/>
      <xs:group ref="query-quantifier.content"/>
      <xs:group ref="extended-signature-predicate-sorts.content"/>
    </xs:choice>
  </xs:group>
  <xs:complexType name="formula-assert.type">
    <xs:group ref="formula-assert.content"/>
    <xs:attributeGroup ref="formula.attlist"/>
  </xs:complexType>
  <xs:complexType name="formula-query.type">
    <xs:group ref="formula-query.content"/>
    <xs:attributeGroup ref="formula.attlist"/>
  </xs:complexType>

</xs:schema>
