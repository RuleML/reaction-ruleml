<?xml version="1.0"?>

<xs:schema targetNamespace="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
  xmlns="http://ruleml.org/spec" elementFormDefault="qualified">

  <!-- note that elementFormDefault is qualified because of local declarations -->

  <xs:annotation>
    <xs:documentation xml:lang="en"> This is the XML Schema module for RuleML quantifiers. File:
      quantifier_module.xsd Version: 1.02 Last Modification: 2015-07-16 This module declares the
      following RuleML elements: * Forall * Exists * declare * formula See
      http://www.ruleml.org/modularization for details about this modularization approach.
    </xs:documentation>
    
    <xs:appinfo>
      <dc:title>RuleML Schema</dc:title>
      <dc:version>1.02</dc:version>
      <dc:creator>Adrian Paschke (paschke AT gmx.de)</dc:creator>
      <dc:creator>Tara Athan (taraathan AT gmail.com)</dc:creator>
      <dc:subject>RuleML, custom-built for Reaction RuleML 1.02</dc:subject> 
      <dc:description>custom-built main module for Reaction RuleML</dc:description> 
      <dc:date>2015-07-14T17:04:00+0200</dc:date>
      <dc:language>en</dc:language>
      <dc:rights>'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.</dc:rights> <dcterms:rights>http://ruleml.org/licensing/RSL1.0-RuleML</dcterms:rights> 
       <dc:relation>http://reaction.ruleml.org</dc:relation>
    </xs:appinfo>  
  </xs:annotation>

  <!--
		*** Forall ***
		Explicit universal quantifier.
		
		See http://www.ruleml.org/1.02/glossary/#gloss-Forall 
  -->
  <xs:attributeGroup name="Forall.attlist">
    <xs:attributeGroup ref="quantifier-interface.attlist"/>
    <xs:attributeGroup ref="node-element.attlist"/>
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:group name="Forall.content">
    <xs:sequence>
      <xs:group ref="meta-roles.content"/>
      <xs:element ref="degree" minOccurs="0"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="declare"/>
        <xs:group ref="declare.content"/>
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="formula" type="formula-forall.type"/>
        <xs:group ref="formula-forall.content"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:complexType name="Forall.type">
    <xs:group ref="Forall.content"/>
    <xs:attributeGroup ref="Forall.attlist"/>
  </xs:complexType>
  <xs:element name="Forall" type="Forall.type"/>

  <!--
		*** Exists ***
		Explicit existential quantifier.

		See http://www.ruleml.org/1.02/glossary/#gloss-Exists
  -->
  <xs:attributeGroup name="Exists.attlist">
    <xs:attributeGroup ref="quantifier-interface.attlist"/>
    <xs:attributeGroup ref="node-element.attlist"/>
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:group name="Exists.content">
    <xs:sequence>
      <xs:group ref="meta-roles.content"/>
      <xs:element ref="degree" minOccurs="0"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="declare"/>
        <xs:group ref="declare.content"/>
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="formula" type="formula-exists.type"/>
        <xs:group ref="formula-exists.content"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:complexType name="Exists.type">
    <xs:group ref="Exists.content"/>
    <xs:attributeGroup ref="Exists.attlist"/>
  </xs:complexType>
  <xs:element name="Exists" type="Exists.type"/>

  <!--
		*** declare ***
		A role used for variables declared within a quantifier.
		
		See http://www.ruleml.org/1.02/glossary/#gloss-declare
	-->
  <xs:attributeGroup name="declare.attlist">
    <xs:attributeGroup ref="xml.attlist"/>
  </xs:attributeGroup>
  <xs:group name="declare.content">
    <xs:sequence>
      <xs:element ref="Var"/>
    </xs:sequence>
  </xs:group>
  <xs:complexType name="declare.type">
    <xs:group ref="declare.content"/>
    <xs:attributeGroup ref="declare.attlist"/>
  </xs:complexType>
  <xs:element name="declare" type="declare.type"/>

  
  <!--
		*** formula ***
		The formula role of a quantifier (<Forall> or <Exists>).
		
		See http://www.ruleml.org/1.02/glossary/#gloss-formula
	-->

  <xs:group name="formula-forall.content">
    <xs:choice>
      <xs:element ref="Implies"/>
      <xs:element ref="Rule"/>
      <xs:element ref="Equivalent"/>
      <xs:group ref="head-quantifier.content"/>
      <xs:group ref="head-connective.content"/>
      <xs:group ref="extended-signature-predicate-sorts.content"/>
    </xs:choice>
  </xs:group>
  <xs:complexType name="formula-forall.type">
    <xs:group ref="formula-forall.content"/>
    <xs:attributeGroup ref="formula.attlist"/>
  </xs:complexType>
  <xs:group name="formula-exists.content">
    <xs:choice>
      <xs:group ref="query-quantifier.content"/>
      <xs:group ref="query-connective.content"/>
      <xs:group ref="extended-signature-predicate-sorts.content"/>
    </xs:choice>
  </xs:group>
  <xs:complexType name="formula-exists.type">
    <xs:group ref="formula-exists.content"/>
    <xs:attributeGroup ref="formula.attlist"/>
  </xs:complexType>
  

</xs:schema>
