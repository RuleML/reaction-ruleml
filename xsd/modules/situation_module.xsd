<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
	targetNamespace="http://ruleml.org/spec" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation xml:lang="en">
          
			Situation module part of Reaction RuleML. It defines the core 
			situation constructs
			
			This is the XML Schema situation module for Reaction RuleML.
			File: situation_module.xsd
			Version: 1.02
			Last Modification: 2015-03-29

			This schema declares the following Reaction RuleML elements and attributes:

			  * Situation

		</xs:documentation>
		
		<xs:appinfo>
			<dc:title>Reaction RuleML Schema</dc:title>
			<dc:version>1.02</dc:version>
			<dc:creator>Adrian Paschke (paschke AT gmx.de)</dc:creator>
			<dc:subject>RuleML, custom-built for Reaction RuleML 1.02</dc:subject> 
			<dc:description>custom-built main module for Reaction RuleML</dc:description> 
			<dc:date>2015-03-22T29:11:17-0300</dc:date>
			<dc:language>en</dc:language>
			<dc:rights>'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.</dc:rights> 
			<dcterms:rights>http://ruleml.org/licensing/RSL1.0-RuleML</dcterms:rights> 
			 <dc:relation>http://reaction.ruleml.org</dc:relation>
		</xs:appinfo>		
	</xs:annotation>


	<!--
	*** Situation ***
	Explicit generic Situation. 
	
	see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Situation
	
	The situation can be defined internally 
	   	* with positional arguments <arg>, e.g., <arg><Ind>s1</Ind></arg>
      	* with unpositional slots <slot>, e.g., <slot><Ind>name</Ind><Ind>s1</Ind></slot><slot><Ind>occursAt</Ind><Time>....</Time></slot>
      	* by the any content model (<content>xs:any Element</content>), which acts as an extension point
      or externally, where the optional @iri attribute points to an external definition of the situation.
      The optional @type attribute defines the type of the situation.
      
      The situation instance (aka situation occurence is defined by its <arg>uments, <slot>s, as a situation interpretation <formula>, 
      or arbitrary <content>. A situation pattern, as used, e.g., in a query or condition of a rule, is defined in the <signature> 
      as situation template, e.g. <Situation><signature>...</signature></Situation>.
      
      Note: It is possible to interpret intervals, time (in the reaction layers also events and actions) as situations,
            e.g., <Situation><Time>...</Time></Situation>. 
	-->
	<xs:attributeGroup name="Situation-formula.attlist">
		<xs:attributeGroup ref="formula-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Situation-formula.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>
			<xs:element ref="degree" minOccurs="0"/>			
			<xs:choice minOccurs="0">
				<xs:sequence>
					<xs:element name="slot" type="slot.type" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="resl" minOccurs="0"/>
					<xs:choice minOccurs="0">
						<xs:sequence>
						<xs:choice>
							<xs:sequence>
								<xs:choice maxOccurs="unbounded">
									<xs:element name="arg" type="arg_situation.type"/>
									<xs:group ref="arg_situation.content"/>
								</xs:choice>
								<xs:element ref="repo" minOccurs="0"/>
							</xs:sequence>
							<xs:element ref="repo"/>
						</xs:choice>
						<xs:element name="slot" type="slot.type" minOccurs="0" maxOccurs="unbounded"/>
						<xs:element ref="resl" minOccurs="0"/>
						</xs:sequence>
					</xs:choice>
				</xs:sequence>    				
				<xs:element name="content" type="situation_anycontent.type"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Situation-formula.type">
		<xs:group ref="Situation-formula.content"/>
		<xs:attributeGroup ref="Situation-formula.attlist"/>
	</xs:complexType>

	<!-- Situation term -->
	
	<xs:attributeGroup name="Situation-term.attlist">
		<xs:attributeGroup ref="term-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Situation-term.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>			
			<xs:choice minOccurs="0">
				<xs:sequence>
					<xs:element name="slot" type="slot.type" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="resl" minOccurs="0"/>
					<xs:choice minOccurs="0">
						<xs:sequence>
							<xs:choice>
								<xs:sequence>
									<xs:choice maxOccurs="unbounded">
										<xs:element name="arg" type="arg_situation.type"/>
										<xs:group ref="arg_situation.content"/>
									</xs:choice>
									<xs:element ref="repo" minOccurs="0"/>
								</xs:sequence>
								<xs:element ref="repo"/>
							</xs:choice>
							<xs:element name="slot" type="slot.type" minOccurs="0" maxOccurs="unbounded"/>
							<xs:element ref="resl" minOccurs="0"/>
						</xs:sequence>
					</xs:choice>
				</xs:sequence>    				
				<xs:element name="content" type="situation_anycontent.type"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Situation-term.type">
		<xs:group ref="Situation-term.content"/>
		<xs:attributeGroup ref="Situation-term.attlist"/>
	</xs:complexType>

	<!--
     *** arg ***
     
     Definition of the the arg role for Situation
     
     see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-arg     
-->
	<xs:attributeGroup name="arg_situation.attlist">
		<xs:attributeGroup ref="edge-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="arg_situation.content">
		<xs:choice>
			<xs:group ref="situation_primitives.content"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="arg_situation.type">
		<xs:group ref="arg_situation.content"/>
		<xs:attributeGroup ref="arg_situation.attlist"/>
	</xs:complexType>

	<!--
     *** content ***
     
     see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-content
     
     @prefix ais used to define a prefix and a term mapping vocabulary for the XML content
     	See CURIE to IRI and term to IRI translation
-->
	<xs:attributeGroup name="situation_anycontent.attlist">
		<xs:attributeGroup ref="edge-element.attlist"/>	
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="situation_anycontent.content">
		<xs:choice>
			<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="situation_anycontent.type">
		<xs:group ref="situation_anycontent.content"/>
		<xs:attributeGroup ref="situation_anycontent.attlist"/>
	</xs:complexType>

</xs:schema>
