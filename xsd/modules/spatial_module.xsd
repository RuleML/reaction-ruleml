<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
	targetNamespace="http://ruleml.org/spec" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation xml:lang="en">
			
			Spatial module part of Reaction RuleML. It defines the core 
			spatial constructs
			
			This is the XML Schema spatial module for Reaction RuleML.
			File: spatial_module.xsd
			Version: 1.0
			Last Modification: 2011-03-29
			
			This schema declares the following Reaction RuleML elements and attributes:
			
			* Spatial
			
		</xs:documentation>
		<xs:documentation source="http://ruleml.org/licensing/ruleml_eula.html"/>
		<xs:appinfo>
			<dc:title>RuleML Schema</dc:title>
			<dc:version>1.0</dc:version>
			<dc:creator>Adrian Paschke (paschke AT gmx.de)</dc:creator>
			<dc:subject>RuleML, custom-built for Reaction RuleML 1.0</dc:subject> 
			<dc:description>custom-built main module for Reaction RuleML</dc:description> 
			<dc:date>2011-03-29T23:11:17-0300</dc:date>
			<dc:language>en</dc:language>
			<dcterms:rights>LGPL-3.0</dcterms:rights> 
			<dc:relation>http://wiki.ruleml.org/index.php/Relax_NG</dc:relation>
		</xs:appinfo>  
	</xs:annotation>
	
	
	<!--
	*** Spatial ***
	Explicit generic Spatial construct. The spatial can be represented internally 
      * with positional arguments <arg>
      * with unpositional slots <slot>
      * by the any content model (<content>xs:any Element</content>), which acts as an extension point to embed arbitrary XML syntaxes
      or externally, where the optional @iri attribute points to an external data definition of the spatial
      The optional @type attribute defines the type of the spatial
		
	content model: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, ( 
		        ((slot)*,(resl)?,((((arg|Ind|Data|Skolem|Var|Reify|Expr|Plex|Time|Spatial|Interval)+, (repo)?)|(repo)),(slot)*, (resl)?)?) | 
				content(xs:any*)* ) ) -->
	<xs:attributeGroup name="Spatial.attlist">
		<xs:attributeGroup ref="type.attrib"/>
		<xs:attributeGroup ref="iri.attrib"/>
		<xs:attributeGroup ref="node.attrib"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Spatial.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>	
			<xs:choice>
				<xs:sequence>
					<xs:element name="slot" type="slot.type" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="resl" minOccurs="0"/>
					<xs:sequence minOccurs="0">
						<xs:choice>
							<xs:sequence>
								<xs:choice maxOccurs="unbounded">
									<xs:element ref="arg"/>
									<xs:group ref="arg.content"/>
								</xs:choice>
								<xs:element ref="repo" minOccurs="0"/>
							</xs:sequence>
							<xs:element ref="repo"/>
						</xs:choice>
						<xs:element name="slot" type="slot.type" minOccurs="0" maxOccurs="unbounded"/>
						<xs:element ref="resl" minOccurs="0"/>
					</xs:sequence>
				</xs:sequence>
				<xs:element name="content" type="spatial_anycontent.type" minOccurs="0" maxOccurs="unbounded"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Spatial.type">
		<xs:group ref="Spatial.content"/>
		<xs:attributeGroup ref="Spatial.attlist"/>
	</xs:complexType>
	<xs:element name="Spatial" type="Spatial.type"/>
	
	<!--
     *** content ***
     
     content model:  xs:any*
-->
	<xs:attributeGroup name="spatial_anycontent.attlist">
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="spatial_anycontent.content">
		<xs:choice>
			<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="spatial_anycontent.type">
		<xs:group ref="spatial_anycontent.content"/>
		<xs:attributeGroup ref="spatial_anycontent.attlist"/>
	</xs:complexType>
	

</xs:schema>
