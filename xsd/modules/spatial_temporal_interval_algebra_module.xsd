<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
	targetNamespace="http://ruleml.org/spec" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation xml:lang="en">
          
            spatial-temporal-interval algebra module part of Reaction RuleML
			This is the XML Schema of the algebra module for Reaction RuleML
			File: spatial_temporal_interval_algebra_module.xsd
			Version: 1.02
			Last Modification: 2015-07-19
			
			This schema declares the following Reaction RuleML elements and attributes:
                  
                  Operation (generic operator)
                  at (general role "at Time | Spatial | Interval)
                  
                  Spatial, Temporal, Interval Function Constructs 
                  
                  * After
                  * Before
				  * Every
                  * Any
                  * Timer
                  
                  
                  (Allen's) Interval Relations
                  
                  * During
                  * Overlaps
                  * Starts
                  * Precedes
                  * Succeeds
                  * Meets
                  * Equal
                  * Finishes
                  
                  
 			
			The approach is modelled after that used in "Modularization of XHTML in XML Schema"
			WD [http://www.w3.org/TR/xhtml-m12n-schema/], which will soon be integrated with
			"Modularization of XHTML" (REC-xhtml-modularization-20010410)
			[http://www.w3.org/TR/xhtml-modularization/].
		</xs:documentation>
		
		<xs:appinfo>
			<dc:title>Reaction RuleML Schema</dc:title>
			<dc:version>1.02</dc:version>
			<dc:creator>Adrian Paschke (paschke AT gmx.de)</dc:creator>
            <dc:creator>Tara Athan (taraathan AT gmail.com)</dc:creator>
			<dc:subject>RuleML, custom-built for Reaction RuleML 1.02</dc:subject> 
			<dc:description>custom-built main module for Reaction RuleML</dc:description> 
			<dc:date>2015-07-14T17:04:00+0200</dc:date>
			<dc:language>en</dc:language>
			<dc:rights>'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.</dc:rights> <dcterms:rights>http://ruleml.org/licensing/RSL1.0-RuleML</dcterms:rights> 
			 <dc:relation>http://reaction.ruleml.org</dc:relation>
		</xs:appinfo>		
	</xs:annotation>		
	
	
	<!--(After | Before | Any | Every | Timer | Operation)-->
	
	<xs:group name="spatial_temporal_algebra_group.content">
		<xs:choice>
			<xs:element ref="After"/>
			<xs:element ref="Before"/>
			<xs:element ref="Every"/>
			<xs:element ref="Any"/>			
			<xs:element ref="Timer"/>
			<xs:element name="Operation" type="Any.type"/> 
		</xs:choice>
	</xs:group>	

	<!-- (During | Overlaps | Starts | Precedes | Succeeds | Meets |  Finishes | Operation) -->
	
	<!-- Note: Equal is already defined -->
	
	<xs:group name="interval_algebra_group.content">
		<xs:choice>
			<xs:element ref="During"/>
			<xs:element ref="Overlaps"/>
			<xs:element ref="Starts"/>
			<xs:element ref="Precedes"/>
			<xs:element ref="Succeeds"/>
			<xs:element ref="Meets"/>
			<xs:element ref="Finishes"/>
			<xs:element name="Operation" type="IntervalAlgebraOperator.type"/>
		</xs:choice>
	</xs:group>
	

	<!--
      *** at ***
      
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-at
      
	  Note: In Situation Calculus the time is a situation (the history of occured situations as a finite sequence of the events/actions) 	
	
      content model: 
      in KR Reaction RuleML: (Ind | Data | Var | Skolem | Reify  | Expr | Plex | Time | Spatial | Interval | Event | Action | Situation)
      in ECA Reaction RuleML: ((Ind | Data | Var | Skolem | Reify  | Expr | Plex | Time | Spatial | Interval | Event | Action) | (After | Before | Any | Every | Timer | Operation))
      in CEP Reaction RuleML: ((Ind | Data | Var | Skolem | Reify  | Expr | Plex | Time | Spatial | Interval | Event | Action) | (After | Before | Any | Every | Timer | Operation))
      
      attributes: @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
	-->
	<xs:attributeGroup name="at.attlist">
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="at.content">
		<xs:choice>							
			<xs:group ref="time_primitives.content"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="at.type">
		<xs:group ref="at.content"/>
		<xs:attributeGroup ref="at.attlist"/>
	</xs:complexType>
	<xs:element name="at" type="at.type"/>

	<!--
      *** After / Before***

	see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-After
	see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Before

      X after Y  / X before Y
      
      Note: Y might be absolute or relative, e.g. "after 2 days", "2 days after X"  

      content model: 
      DR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, ([arg, arg?] | [content(xs:any),content(xs:any)?] | [(Time | Spatial | Interval |  Ind | Data | Skolem | Var | Reify | Expr | Plex), (Time | Spatial | Interval |  Ind | Data | Skolem | Var | Reify | Expr | Plex)?])) 
	  KR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, ([arg, arg?] | [content(xs:any),content(xs:any)?] | [(Ind | Data | Var | Skolem | Reify  | Expr | Plex | Time | Spatial | Interval | Event | Action | Situation), (Ind | Data | Var | Skolem | Reify  | Expr | Plex | Time | Spatial | Interval | Event | Action | Situation)?] ))
      ECA Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, ([arg, arg?] | [content(xs:any),content(xs:any)?] | [(Time | Spatial | Interval |  Ind | Data | Skolem | Var | Reify | Expr | Plex | Event | Action), (Time | Spatial | Interval |  Ind | Data | Skolem | Var | Reify | Expr | Plex | Event | Action)?])) 	  

	attributes: @type?, @mode?, @arity?, @card?, @minCard?, @maxCard?, @weight?, @style?, @direction?, @scope?, @closure?, @per?, @meta?, @qualify?, @node?, @iri?, @vocab?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
	-->
	<xs:attributeGroup name="After.attlist">
		<xs:attributeGroup ref="operator-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="After.content">
		<xs:sequence>
			<xs:group ref="Interval-term.content"/>	
		</xs:sequence>
	</xs:group>
	<xs:complexType name="After.type">
		<xs:group ref="After.content"/>
		<xs:attributeGroup ref="After.attlist"/>
	</xs:complexType>
	<xs:element name="After" type="After.type"/>
	<xs:element name="Before" type="After.type"/>

	<!--
      *** Every ***
      
      Every X 
      
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Every
      
      Note:  X is often a relative, e.g. "every Monday", "every 2 meters" 
      
      content model:
      DR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (arg | content(xs:any) | (Time | Spatial | Interval |  Ind | Data | Skolem | Var | Reify | Expr | Plex) )) 
	  KR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (arg | content(xs:any) | (Ind | Data | Var | Skolem | Reify  | Expr | Plex | Time | Spatial | Interval | Event | Action | Situation) ))
      DR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (arg | content(xs:any) | (Time | Spatial | Interval |  Event | Action | Ind | Data | Skolem | Var | Reify | Expr | Plex) )) 

	attributes: @type?, @mode?, @arity?, @card?, @minCard?, @maxCard?, @weight?, @style?, @direction?, @scope?, @closure?, @per?, @meta?, @qualify?, @node?, @iri?, @vocab?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
	-->
	<xs:attributeGroup name="Every.attlist">
		<xs:attributeGroup ref="operator-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Every.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>	
			<xs:choice  minOccurs="0">
				<xs:element name="arg" type="arg_interval.type"/>
				<xs:group ref="interval_primitives.content"/>			
				<xs:element name="content" type="interval_anycontent.type"/>												
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Every.type">
		<xs:group ref="Every.content"/>
		<xs:attributeGroup ref="Every.attlist"/>
	</xs:complexType>
	<xs:element name="Every" type="Every.type"/>

	<!--
      *** Any ***
      
      Any X1,..Xn
      
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Any
            
      e.g. "at any Saturday and Sunday"     
           
      content model: 
      DR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (arg* | content(xs:any)* | (Time | Spatial | Interval |  Ind | Data | Skolem | Var | Reify | Expr | Plex)*)) 
	  KR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (arg*] | content(xs:any)* | (Ind | Data | Var | Skolem | Reify  | Expr | Plex | Time | Spatial | Interval | Event | Action | Situation)* ))
      ECA Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (arg* | content(xs:any)* | (Time | Spatial | Interval | Event | Action | Ind | Data | Skolem | Var | Reify | Expr | Plex)*)) 

	attributes: @type?, @mode?, @arity?, @card?, @minCard?, @maxCard?, @weight?, @style?, @direction?, @scope?, @closure?, @per?, @meta?, @qualify?, @node?, @iri?, @vocab?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
	-->
	<xs:attributeGroup name="Any.attlist">
		<xs:attributeGroup ref="operator-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Any.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>	
			<xs:choice minOccurs="0">
				<xs:element name="arg" type="arg_interval.type" minOccurs="1" maxOccurs="unbounded"/>
				<xs:group ref="interval_primitives.content" minOccurs="1" maxOccurs="unbounded"/>			
				<xs:element name="content" type="interval_anycontent.type" minOccurs="1" maxOccurs="unbounded"/>												
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Any.type">
		<xs:group ref="Any.content"/>
		<xs:attributeGroup ref="Any.attlist"/>
	</xs:complexType>
	<xs:element name="Any" type="Any.type"/>


	<!--
      *** (Recurring) Timer ***
      
      After X Every Y
      
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Recurring
      
      Note: X and Y might be relative, e.g. after 1 hour every hour (recurring timer)
      
      content model: 
         
      DR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, ([arg, arg?] | [content(xs:any),content(xs:any)?] | [(Time | Spatial | Interval |  Ind | Data | Skolem | Var | Reify | Expr | Plex), (Time | Spatial | Interval |  Ind | Data | Skolem | Var | Reify | Expr | Plex)?])) 
	  KR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, ([arg, arg?] | [content(xs:any),content(xs:any)?] | [(Ind | Data | Var | Skolem | Reify  | Expr | Plex | Time | Spatial | Interval | Event | Action | Situation), (Ind | Data | Var | Skolem | Reify  | Expr | Plex | Time | Spatial | Interval | Event | Action | Situation)?] )) 
      ECA Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, ([arg, arg?] | [content(xs:any),content(xs:any)?] | [(Time | Spatial | Interval | Event | Action | Ind | Data | Skolem | Var | Reify | Expr | Plex), (Time | Spatial | Interval | Event | Action | Ind | Data | Skolem | Var | Reify | Expr | Plex)?])) 
       
      attributes: @type?, @mode?, @arity?, @card?, @minCard?, @maxCard?, @weight?, @style?, @direction?, @scope?, @closure?, @per?, @meta?, @qualify?, @node?, @iri?, @vocab?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
	-->
	<xs:attributeGroup name="Timer.attlist">
		<xs:attributeGroup ref="operator-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Timer.content">
		<xs:sequence>
			<xs:group ref="Interval-term.content"/>	
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Timer.type">
		<xs:group ref="Timer.content"/>
		<xs:attributeGroup ref="Timer.attlist"/>
	</xs:complexType>
	<xs:element name="Timer" type="Timer.type"/>

	<!--
      *** (During | Overlaps | Starts | Precedes | Succeeds | Meets | Equal | Finishes) ***
      
      operator(Interval, Interval)
      
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-During
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Overlaps
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Starts
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Precedes
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Succeeds
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Meets
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Equal
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.02#gloss-Finishes
      
      content model: 
      ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, degree? ([arg, arg] | [Interval, Interval])
      
      attributes: @type?, @mode?, @arity?, @card?, @minCard?, @maxCard?, @weight?, @style?, @direction?, @scope?, @closure?, @per?, @meta?, @qualify?, @node?, @iri?, @vocab?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
	-->
	<xs:attributeGroup name="IntervalAlgebraOperator.attlist">
		<xs:attributeGroup ref="operator-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="IntervalAlgebraOperator.content">
		<xs:sequence>
			<xs:element ref="degree" minOccurs="0"/>
			<xs:group ref="meta-roles.content"/>
			<xs:sequence>
				<xs:choice>
					<xs:element name="arg" type="arg_interval.type"/>
					<xs:element name="Interval" type="Interval-term.type"/>	
				</xs:choice>
				<xs:choice>
					<xs:element name="arg" type="arg_interval.type"/>
					<xs:element name="Interval" type="Interval-term.type"/>	
				</xs:choice>	
			</xs:sequence>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="IntervalAlgebraOperator.type">
		<xs:group ref="IntervalAlgebraOperator.content"/>
		<xs:attributeGroup ref="IntervalAlgebraOperator.attlist"/>
	</xs:complexType>
	<xs:element name="During" type="IntervalAlgebraOperator.type"/>
	<xs:element name="Overlaps" type="IntervalAlgebraOperator.type"/>
	<xs:element name="Starts" type="IntervalAlgebraOperator.type"/>
	<xs:element name="Precedes" type="IntervalAlgebraOperator.type"/>
	<xs:element name="Succeeds" type="IntervalAlgebraOperator.type"/>
	<xs:element name="Meets" type="IntervalAlgebraOperator.type"/>
	<xs:element name="Finishes" type="IntervalAlgebraOperator.type"/>
	

</xs:schema>


