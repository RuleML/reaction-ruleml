<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
	targetNamespace="http://ruleml.org/spec" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation xml:lang="en">
			
			Test and Proof module part of Reaction RuleML.
			
			This is the XML Schema Test module for Reaction RuleML.
			File: test_module.xsd
			Version: 1.0
			Last Modification: 2011-07-20
			
			Further information - see RBSLA project (http://rbsla.ruleml.org)
			ContractLog framework VVI Testing: http://rbsla.ruleml.org/docs/ContractLog_VVI.pdf
			
			This schema declares the following Reaction RuleML elements and attributes:		  
			
			* Test
			* vvi
			* TestSuite
			* testbase
			* TestItem
			* Answer	
			* formula (Answer)
			* expectedResult
			
			The approach is modelled after that used in "Modularization of XHTML in XML Schema"
			WD [http://www.w3.org/TR/xhtml-m12n-schema/], which will soon be integrated with
			"Modularization of XHTML" (REC-xhtml-modularization-20010410)
			[http://www.w3.org/TR/xhtml-modularization/].
			
		</xs:documentation>
		<xs:documentation source="http://ruleml.org/licensing/ruleml_eula.html"/>
		<xs:appinfo>
			<dc:title>Reaction RuleML Schema</dc:title>
			<dc:version>1.0</dc:version>
			<dc:creator>Adrian Paschke (paschke AT gmx.de)</dc:creator>
			<dc:subject>RuleML, custom-built for Reaction RuleML 1.0</dc:subject> 
			<dc:description>custom-built main module for Reaction RuleML</dc:description> 
			<dc:date>2011-03-29T23:11:17-0300</dc:date>
			<dc:language>en</dc:language>
			<dc:rights>'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.</dc:rights> <dcterms:rights>http://ruleml.org/licensing/RSL1.0-RuleML</dcterms:rights>  
			 <dc:relation>http://reaction.ruleml.org</dc:relation>
		</xs:appinfo>
	</xs:annotation>
	

	<!--
      *** Test ***
      A Test action/primitive that provides the syntax for Verification, Validation and Integrity (VVI) Testing.
      
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.0#gloss-Test
      
      An optional scope (<scope>) can be defined so that the test applies only to the scope (constructed view) on the knowledge base.

      content model: 
       ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (vvi | Entails | TestItem | TestSuite)*)
      
      Test has the following attributes:
      attributes: @type?, @mode?, @arity?, @card?, @minCard?, @maxCard?, @weight?, @style?, @direction?, @safety?, @scope?, @closure?, @per?, @meta?, @qualify?, @node?, @iri?, @vocab?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base?   
	-->
	<xs:attributeGroup name="Test.attlist">
		<xs:attributeGroup ref="action-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Test.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="vvi"/>
				<xs:group ref="vvi.content"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Test.type">
		<xs:group ref="Test.content"/>
		<xs:attributeGroup ref="Test.attlist"/>
	</xs:complexType>
	<xs:element name="Test" type="Test.type"/>
		
	<!--
     *** vvi ***
     
     vvi role - "verification, validation, integrity" tests
     
     see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.0#gloss-vvi
     
     content model: ( Entails | TestItem | TestSuite )
     
      vvi has the following attributes:
    attributes: @index?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base? 
-->
	<xs:attributeGroup name="vvi.attlist">
		<xs:attributeGroup ref="edge-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="vvi.content">
		<xs:choice>
			<xs:element ref="Entails"/>
			<xs:element ref="TestSuite"/>
			<xs:element ref="TestItem"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="vvi.type">
		<xs:group ref="vvi.content"/>
		<xs:attributeGroup ref="vvi.attlist"/>
	</xs:complexType>
	<xs:element name="vvi" type="vvi.type"/>

	<!--
     *** testsbase ***
     
     base role for the test assertion | consultation base
     
     see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.0#gloss-testbase
     
     content model: ( Consult | Assert )
     
      base has the following attributes:
         attributes: @prefix?, @key?, @keyref?, @xml:id?, @xml:base? 
-->
	<xs:attributeGroup name="testbase.attlist">
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="testbase.content">
		<xs:choice>
			<xs:element ref="Consult"/>
			<xs:element ref="Assert"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="testbase.type">
		<xs:group ref="testbase.content"/>
		<xs:attributeGroup ref="testbase.attlist"/>
	</xs:complexType>
	<xs:element name="testbase" type="testbase.type"/>

	<!--
      *** TestSuite ***
      A TestSuite consisting of the assertion | consultation base (test assertions) and the VVI tests (integrity entailments, test items or nested test suites 

	see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.0#gloss-TestSuite

      content model: 
       ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (testbase | Consult | Assert), (vvi | Entails | TestItem | TestSuite)*)
      
      TestSuite has the following attributes:
      attributes:  @type?, @mode?, @arity?, @card?, @minCard?, @maxCard?, @weight?, @style?, @direction?, @scope?, @closure?, @material?, @per?, @meta?, @qualify?, @node?, @iri?, @vocab?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
	-->
	<xs:attributeGroup name="TestSuite.attlist">
		<xs:attributeGroup ref="group-formula-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="TestSuite.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="testbase"/>
				<xs:element ref="Assert"/>
				<xs:element ref="Consult"/>
			</xs:choice>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="vvi"/>
				<xs:group ref="vvi.content"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="TestSuite.type">
		<xs:group ref="TestSuite.content"/>
		<xs:attributeGroup ref="TestSuite.attlist"/>
	</xs:complexType>
	<xs:element name="TestSuite" type="TestSuite.type"/>
	
	<!--
      *** TestItem ***
      TestItem describing one particular test consisting of the test act (typically a Query) and the expected result (the expected Answer with the predefined expected truth valuation (<degree>) and results/variable bindings)
      
     see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.0#gloss-TestItem
      
      content model:
 		 
	  ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, (act|Query|Assert|Retract|Update|Send|Receive|Consult|Test|Action), (expectedResult|Answer) )

     attributes:  @type?, @mode?, @arity?, @card?, @minCard?, @maxCard?, @weight?, @style?, @direction?, @scope?, @closure?, @material?, @per?, @meta?, @qualify?, @node?, @iri?, @vocab?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
	  
    -->
	<xs:attributeGroup name="TestItem.attlist">
		<xs:attributeGroup ref="group-formula-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="TestItem.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>
			<xs:sequence>
				<xs:choice>
					<xs:element ref="act"/> 
					<xs:group ref="act.content"/>
				</xs:choice>
				<xs:choice>
					<xs:element ref="expectedResult"/>
					<xs:group ref="expectedResult.content"/>	
				</xs:choice>
			</xs:sequence>	
		</xs:sequence>			
	</xs:group>
	<xs:complexType name="TestItem.type">
		<xs:group ref="TestItem.content"/>
		<xs:attributeGroup ref="TestItem.attlist"/>
	</xs:complexType>
	<xs:element name="TestItem" type="TestItem.type"/>
		
	
	<!--
     *** expectedResult***
     
     Definition of the the enclosed role for Send and Receive actions
     
      see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.0#gloss-expectedResult
     
     content model:  
      in CEP Reaction RuleML: (Answer)
      
      attributes: @prefix?, @key?, @keyref?, @xml:id?, @xml:base?

-->
	<xs:attributeGroup name="expectedResult.attlist">
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="expectedResult.content">
		<xs:choice>
			<xs:element ref="Answer"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="expectedResult.type">
		<xs:group ref="expectedResult.content"/>
		<xs:attributeGroup ref="expectedResult.attlist"/>
	</xs:complexType>
	<xs:element name="expectedResult" type="expectedResult.type"/>

</xs:schema>
