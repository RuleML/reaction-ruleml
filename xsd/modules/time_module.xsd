<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://ruleml.org/spec" xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/"
	targetNamespace="http://ruleml.org/spec" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation xml:lang="en">
          
			Time module part of Reaction RuleML. It defines the core 
			time constructs
			
			This is the XML Schema time module for Reaction RuleML.
			File: time_module.xsd
			Version: 1.0
			Last Modification: 2011-03-29

			This schema declares the following Reaction RuleML elements and attributes:

			  * Time

		</xs:documentation>
		<xs:documentation source="http://ruleml.org/licensing/ruleml_eula.html"/>
		<xs:appinfo>
			<dc:title>RuleML Schema</dc:title>
			<dc:version>1.0</dc:version>
			<dc:creator>Adrian Paschke (paschke AT gmx.de)</dc:creator>
			<dc:subject>RuleML, custom-built for Reaction RuleML 1.0</dc:subject> 
			<dc:description>custom-built main module for Reaction RuleML</dc:description> 
			<dc:date>2011-03-29T23:11:17-0300</dc:date>
			<dc:language>en</dc:language>
			<dcterms:rights>LGPL-3.0</dcterms:rights> 
			<dc:relation>http://wiki.ruleml.org/index.php/Relax_NG</dc:relation>
		</xs:appinfo>
	</xs:annotation>


	<!--
	*** Time ***
	Explicit generic Time construct. 
	
	see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.0#gloss-Situation
	
	The time can be represented internally 
      * with positional arguments <arg>, e.g., <arg><Data xsi:type="xs:dateTime>2011-10-02T10:45:34-00:00</Data></arg>
      * with unpositional slots <slot>, e.g., <slot><Ind>year</Ind><Ind>2011</Ind></slot><slot><Ind>month</Ind><Ind>10</Ind></slot>
      * by the any content model (<content>xs:any Element</content>), which acts as an extension point to embed one of the many existing XML syntaxes for time
      or externally, where the optional @iri attribute points to an external data definition of the time
      The optional @type attribute defines the type of the time, e.g. ruleml:TimeInstant (linear continuous time model) 
      or ruleml:TimeInterval (discrete time interval model). The default time semantics is a discrete time model.
      Note: Time can be defined absolute or relative.
      		
	content model: 
	DR Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, ( 
		        ((slot)*,(resl)?,((((arg|Ind|Data|Skolem|Var|Reify|Expr|Plex|Time|Spatial|Interval| (After | Before | Any | Every | Timer | Operator))+, (repo)?)|(repo)),(slot)*, (resl)?)?) |		       
				content(xs:any*)* ) ) 
	KR Reaction RuleML:  ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, ( 
				((slot)*,(resl)?,((((arg|Ind|Data|Skolem|Var|Reify|Expr|Plex|Time|Spatial|Interval|Event|Action|Situation| (After | Before | Any | Every | Timer | Operator))+, (repo)?)|(repo)),(slot)*, (resl)?)?) |		       
				content(xs:any*)* ) ) 
	ECA Reaction RuleML: ( meta*, scope*, guard*, evaluation*, signature*, qualification*, quantification*, oid?, ( 
		        ((slot)*,(resl)?,((((arg|Ind|Data|Skolem|Var|Reify|Expr|Plex|Time|Spatial|Interval|Event|Action | (After | Before | Any | Every | Timer | Operator))+, (repo)?)|(repo)),(slot)*, (resl)?)?) |		       
				content(xs:any*)* ) ) 	
	
	attributes: @type?, @mode?, @arity?, @card?, @minCard?, @maxCard?, @weight?, @style?, @direction?, @scope?, @closure?, @per?, @meta?, @qualify?, @node?, @iri?, @vocab?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
	-->
	<xs:attributeGroup name="Time.attlist">
		<xs:attributeGroup ref="formula-interface.attlist"/>
		<xs:attributeGroup ref="node-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="Time.content">
		<xs:sequence>
			<xs:group ref="meta-roles.content"/>
			<xs:choice>
				<xs:sequence>
					<xs:element name="slot" type="slot.type" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element ref="resl" minOccurs="0"/>
					<xs:choice minOccurs="0">
						<xs:sequence>
						<xs:choice>
							<xs:sequence>
								<xs:choice maxOccurs="unbounded">
									<xs:element name="arg" type="arg_time.type"/>
									<xs:group ref="time_primitives.content"/>
								</xs:choice>
								<xs:element ref="repo" minOccurs="0"/>
							</xs:sequence>
							<xs:element ref="repo"/>
						</xs:choice>
						<xs:element name="slot" type="slot.type" minOccurs="0" maxOccurs="unbounded"/>
						<xs:element ref="resl" minOccurs="0"/>
						</xs:sequence>
					</xs:choice>
				</xs:sequence>
				<xs:element name="content" type="time_anycontent.type" minOccurs="0" maxOccurs="unbounded"/>
			</xs:choice>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="Time.type">
		<xs:group ref="Time.content"/>
		<xs:attributeGroup ref="Time.attlist"/>
	</xs:complexType>
	<xs:element name="Time" type="Time.type"/>


	<!--
     *** arg ***
     
     Definition of the the arg role for Time
     
     see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.0#gloss-arg
     
     content model:  
     in DR Reaction RuleML: (Ind|Data|Skolem|Var|Reify|Expr|Plex|Time|Spatial|Interval | (After | Before | Any | Every | Timer | Operator))
     in KR Reaction RuleML: (Ind|Data|Skolem|Var|Reify|Expr|Plex|Time|Spatial|Interval|Event|Action|Situation | (After | Before | Any | Every | Timer | Operator))
     in ECA Reaction RuleML: (Ind|Data|Skolem|Var|Reify|Expr|Plex|Time|Spatial|Interval|Event|Action | (After | Before | Any | Every | Timer | Operator))  
     
     attributes: @index?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
          
-->
	<xs:attributeGroup name="arg_time.attlist">
		<xs:attributeGroup ref="edge-element.attlist"/>
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="arg_time.content">
		<xs:choice>
			<xs:group ref="time_primitives.content"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="arg_time.type">
		<xs:group ref="arg_time.content"/>
		<xs:attributeGroup ref="arg_time.attlist"/>
	</xs:complexType>
	

	<!--
     *** content ***
     
     see: http://wiki.ruleml.org/index.php/Glossary_of_Reaction_RuleML_1.0#gloss-content
     
     @prefix and @vocab is used to define a prefix and a term mapping vocabulary for the XML content
     	See CURIE to IRI and term to IRI translation
     
     content model:  xs:any*

     attributes:  @index?, @prefix?, @key?, @keyref?, @xml:id?, @xml:base?
-->
	<xs:attributeGroup name="time_anycontent.attlist">
		<xs:attributeGroup ref="edge-element.attlist"/>	
		<xs:attributeGroup ref="xml.attlist"/>
	</xs:attributeGroup>
	<xs:group name="time_anycontent.content">
		<xs:choice>
			<xs:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
		</xs:choice>
	</xs:group>
	<xs:complexType name="time_anycontent.type">
		<xs:group ref="time_anycontent.content"/>
		<xs:attributeGroup ref="time_anycontent.attlist"/>
	</xs:complexType>

</xs:schema>
